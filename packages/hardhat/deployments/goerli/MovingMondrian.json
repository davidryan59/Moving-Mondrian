{
  "address": "0xA46D28633B36FB9dF949B82d29BF1B72994Fe34C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialBeneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mfAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "msAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiaryLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "generateSVGofTokenById",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchSize",
          "type": "uint256"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintMaxBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintsCompleted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintsRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "updateBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newExternalUrl",
          "type": "string"
        }
      ],
      "name": "updateExternalUrl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRoyaltyBasisPoints",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyBasisPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbcad0bb014220e72c41e352691d508de679eddde6ad225813fe163288d22f722",
  "receipt": {
    "to": null,
    "from": "0xFad9eF9212a8C30c7Ffc3C4cE1c6685772dc2aE6",
    "contractAddress": "0xA46D28633B36FB9dF949B82d29BF1B72994Fe34C",
    "transactionIndex": 14,
    "gasUsed": "10791855",
    "logsBloom": "0x
    "blockHash": "0xd2abf506bb189136d04c8580367b137e90149531f2497b6f6dd27075b943d87c",
    "transactionHash": "0xbcad0bb014220e72c41e352691d508de679eddde6ad225813fe163288d22f722",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 10337420,
        "transactionHash": "0xbcad0bb014220e72c41e352691d508de679eddde6ad225813fe163288d22f722",
        "address": "0xA46D28633B36FB9dF949B82d29BF1B72994Fe34C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fad9ef9212a8c30c7ffc3c4ce1c6685772dc2ae6"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0xd2abf506bb189136d04c8580367b137e90149531f2497b6f6dd27075b943d87c"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 10337420,
        "transactionHash": "0xbcad0bb014220e72c41e352691d508de679eddde6ad225813fe163288d22f722",
        "address": "0xA46D28633B36FB9dF949B82d29BF1B72994Fe34C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000fad9ef9212a8c30c7ffc3c4ce1c6685772dc2ae6",
          "0x0000000000000000000000007349d6e55cb3f737249fbaa047c16b826559b127"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0xd2abf506bb189136d04c8580367b137e90149531f2497b6f6dd27075b943d87c"
      }
    ],
    "blockNumber": 10337420,
    "cumulativeGasUsed": "13014496",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7349d6e55cB3F737249FbAa047C16b826559B127",
    "0x7349d6e55cB3F737249FbAa047C16b826559B127",
    "0xF2D2859BC10ce6c7c338c949a0e9eaa730C2d1c3",
    "0xA0F5053C75f344F1C0E3C5d88Ce343bB7716793a"
  ],
  "numDeployments": 2,
  "solcInputHash": "1904c013d217fa9e21462de06df4ebd0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mfAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"msAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiaryLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"generateSVGofTokenById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintMaxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintsCompleted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"updateBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newExternalUrl\",\"type\":\"string\"}],\"name\":\"updateExternalUrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRoyaltyBasisPoints\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_salePrice\":\"- the sale price of the NFT asset specified by _tokenId\",\"_tokenId\":\"- the NFT asset queried for royalty information\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment\",\"royaltyAmount\":\"- the royalty payment amount for _salePrice\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdraw()\":{\"notice\":\"Beneficiary handling - allow all ETH to be withdrawn from contract to beneficiary, and the owner to update or lock the beneficiary\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MovingMondrian.sol\":\"MovingMondrian\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/MondrianFrames.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract MondrianFrames {\\n\\n\\t// ------------------------- \\n\\t// Public Getters for frames\\n\\n\\tfunction getFrame(uint256 index) external view returns (string memory) {\\n\\t\\treturn frames[index];\\n\\t}\\n\\n\\tfunction getFrameName(uint256 index) external view returns (string memory) {\\n\\t\\treturn frameNames[index];\\n\\t}\\n\\n\\tfunction getFrameRarityMillibit(uint256 index) external view returns (uint256) {\\n\\t\\treturn frameRarityMillibit[index];\\n\\t}\\n\\n\\t// ------------------------------------------------------\\n\\t// Frame Data - determines the outer perimeter of the NFT\\n\\n\\tstring[32] private frameNames = [\\n\\t\\t\\\"Square\\\",\\n\\t\\t\\\"Square\\\",\\n\\t\\t\\\"Square\\\",\\n\\t\\t\\\"Square\\\",\\n\\n\\t\\t\\\"Square\\\",\\n\\t\\t\\\"Square\\\",\\n\\t\\t\\\"Circle\\\",\\n\\t\\t\\\"Circle\\\",\\n\\n\\t\\t\\\"Smoothed Square\\\",\\n\\t\\t\\\"Rounded Square\\\",\\n\\t\\t\\\"Octagon\\\",\\n\\t\\t\\\"Dodecagon\\\",\\n\\n\\t\\t\\\"Squircle\\\",\\n\\t\\t\\\"Swatch\\\",\\n\\t\\t\\\"Four Eggs\\\",\\n\\t\\t\\\"Hexagon\\\",\\n\\n\\t\\t\\\"Castle\\\",\\n\\t\\t\\\"Cog\\\",\\n\\t\\t\\\"Heptagon\\\",\\n\\t\\t\\\"Zigzag\\\",\\n\\n\\t\\t\\\"Ripples\\\",\\n\\t\\t\\\"Ridged Hexagon\\\",\\n\\t\\t\\\"Splat\\\",\\n\\t\\t\\\"Cloud\\\",\\n\\n\\t\\t\\\"Framed Square\\\",\\n\\t\\t\\\"Pentagon\\\",\\n\\t\\t\\\"Scalloped\\\",\\n\\t\\t\\\"Baroque\\\",\\n\\n\\t\\t\\\"Ferrofluid\\\",\\n\\t\\t\\\"Artisan\\\",\\n\\t\\t\\\"Icositrigon\\\",\\n\\t\\t\\\"Icositrigon\\\"\\n\\t];\\n\\n\\tuint256[32] private frameRarityMillibit = [\\n\\t\\t0, 0, 0, 0,\\n\\t\\t0, 0, 1799, 1799,\\n\\t\\t2888, 2951, 3017, 3085,\\n\\t\\t3158, 3233, 3314, 3399,\\n\\t\\t3489, 3585, 3688, 3799,\\n\\t\\t3919, 4051, 4195, 4355,\\n\\t\\t4536, 4743, 4984, 5273,\\n\\t\\t5636, 6121, 6443, 6443\\n\\t];\\n\\n\\tstring[32] private frames = [\\n\\t\\t// Square\\n\\t\\t'<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"512\\\" height=\\\"512\\\"/>',\\n\\t\\t'<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"512\\\" height=\\\"512\\\"/>',\\n\\t\\t'<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"512\\\" height=\\\"512\\\"/>',\\n\\t\\t'<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"512\\\" height=\\\"512\\\"/>',\\n\\n\\t\\t'<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"512\\\" height=\\\"512\\\"/>',\\n\\t\\t'<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"512\\\" height=\\\"512\\\"/>',\\n\\n\\t\\t// Circle\\n\\t\\t'<circle cx=\\\"256\\\" cy=\\\"256\\\" r=\\\"256\\\"/>',\\n\\t\\t'<circle cx=\\\"256\\\" cy=\\\"256\\\" r=\\\"256\\\"/>',\\n\\t\\t\\n\\n\\t\\t// Smoothed Square\\n\\t\\t'<rect x=\\\"0\\\" y=\\\"0\\\" rx=\\\"42\\\" ry=\\\"42\\\" width=\\\"512\\\" height=\\\"512\\\"/>',\\n\\n\\t\\t// Rounded Square\\n\\t\\t'<rect x=\\\"0\\\" y=\\\"0\\\" rx=\\\"128\\\" ry=\\\"128\\\" width=\\\"512\\\" height=\\\"512\\\"/>',\\n\\n\\t\\t// Octagon\\n\\t\\t'<polygon points=\\\"150,0 362,0 512,150 512,362 362,512 150,512 0,362 0,150\\\"/>',\\n\\n\\t\\t// Dodecagon\\n\\t\\t'<polygon points=\\\"187.4,0 324.6,0 443.4,68.6 512,187.4 512,324.6 443.4,443.4 324.6,512 187.4,512 68.6,443.4 0,324.6 0,187.4 68.6,68.6\\\"/>',\\n\\n\\n\\t\\t// Squircle\\n\\t\\t'<path d=\\\"M 0 256 Q 0 0, 256 0 T 512 256 T 256 512 T 0 256\\\"/>',\\n\\n\\t\\t// Swatch\\n\\t\\t'<polygon points=\\\"0,11.1 11.1,0 22.3,11.1 33.4,0 44.5,11.1 55.7,0 66.8,11.1 77.9,0 89,11.1 100.2,0 111.3,11.1 122.4,0 133.6,11.1 144.7,0 155.8,11.1 167,0 178.1,11.1 189.2,0 200.3,11.1 211.5,0 222.6,11.1 233.7,0 244.9,11.1 256,0 267.1,11.1 278.3,0 289.4,11.1 300.5,0 311.7,11.1 322.8,0 333.9,11.1 345,0 356.2,11.1 367.3,0 378.4,11.1 389.6,0 400.7,11.1 411.8,0 423,11.1 434.1,0 445.2,11.1 456.3,0 467.5,11.1 478.6,0 489.7,11.1 500.9,0 500.9,0 512,11.1 500.9,22.3 512,33.4 500.9,44.5 512,55.7 500.9,66.8 512,77.9 500.9,89 512,100.2 500.9,111.3 512,122.4 500.9,133.6 512,144.7 500.9,155.8 512,167 500.9,178.1 512,189.2 500.9,200.3 512,211.5 500.9,222.6 512,233.7 500.9,244.9 512,256 500.9,267.1 512,278.3 500.9,289.4 512,300.5 500.9,311.7 512,322.8 500.9,333.9 512,345 500.9,356.2 512,367.3 500.9,378.4 512,389.6 500.9,400.7 512,411.8 500.9,423 512,434.1 500.9,445.2 512,456.3 500.9,467.5 512,478.6 500.9,489.7 512,500.9 512,500.9 500.9,512 489.7,500.9 478.6,512 467.5,500.9 456.3,512 445.2,500.9 434.1,512 423,500.9 411.8,512 400.7,500.9 389.6,512 378.4,500.9 367.3,512 356.2,500.9 345,512 333.9,500.9 322.8,512 311.7,500.9 300.5,512 289.4,500.9 278.3,512 267.1,500.9 256,512 244.9,500.9 233.7,512 222.6,500.9 211.5,512 200.3,500.9 189.2,512 178.1,500.9 167,512 155.8,500.9 144.7,512 133.6,500.9 122.4,512 111.3,500.9 100.2,512 89,500.9 77.9,512 66.8,500.9 55.7,512 44.5,500.9 33.4,512 22.3,500.9 11.1,512 11.1,512 0,500.9 11.1,489.7 0,478.6 11.1,467.5 0,456.3 11.1,445.2 0,434.1 11.1,423 0,411.8 11.1,400.7 0,389.6 11.1,378.4 0,367.3 11.1,356.2 0,345 11.1,333.9 0,322.8 11.1,311.7 0,300.5 11.1,289.4 0,278.3 11.1,267.1 0,256 11.1,244.9 0,233.7 11.1,222.6 0,211.5 11.1,200.3 0,189.2 11.1,178.1 0,167 11.1,155.8 0,144.7 11.1,133.6 0,122.4 11.1,111.3 0,100.2 11.1,89 0,77.9 11.1,66.8 0,55.7 11.1,44.5 0,33.4 11.1,22.3 0,11.1\\\"/>',\\n\\n\\t\\t// Four Eggs (Waves 2)\\n\\t\\t'<path d=\\\"M 0 64 C 0 32 32 0 64 0 C 128 0 192 16 256 16 C 320 16 380 0 448 0 C 480 0 512 32 512 64 C 512 128 496 192 496 256 C 496 320 512 380 512 448 C 512 480 480 512 448 512 C 384 512 320 496 256 496 C 192 496 132 512 64 512 C 32 512 0 480 0 448 C 0 384 16 320 16 256 C 16 192 0 132 0 64 Z\\\"/>',\\n\\n\\t\\t// Hexagon\\n\\t\\t'<polygon points=\\\"0,256 128,34.3 384,34.3 512,256 384,477.7 128,477.7\\\"/>',\\n\\n\\n\\t\\t// Castle\\n\\t\\t'<polygon points=\\\"0,22.3 22.3,22.3 22.3,0 44.5,0 44.5,22.3 66.8,22.3 66.8,0 89,0 89,22.3 111.3,22.3 111.3,0 133.6,0 133.6,22.3 155.8,22.3 155.8,0 178.1,0 178.1,22.3 200.3,22.3 200.3,0 222.6,0 222.6,22.3 244.9,22.3 244.9,0 267.1,0 267.1,22.3 289.4,22.3 289.4,0 311.7,0 311.7,22.3 333.9,22.3 333.9,0 356.2,0 356.2,22.3 378.4,22.3 378.4,0 400.7,0 400.7,22.3 423,22.3 423,0 445.2,0 445.2,22.3 467.5,22.3 467.5,0 489.7,0 489.7,22.3 512,22.3 512,44.5 489.7,44.5 489.7,66.8 512,66.8 512,89 489.7,89 489.7,111.3 512,111.3 512,133.6 489.7,133.6 489.7,155.8 512,155.8 512,178.1 489.7,178.1 489.7,200.3 512,200.3 512,222.6 489.7,222.6 489.7,244.9 512,244.9 512,267.1 489.7,267.1 489.7,289.4 512,289.4 512,311.7 489.7,311.7 489.7,333.9 512,333.9 512,356.2 489.7,356.2 489.7,378.4 512,378.4 512,400.7 489.7,400.7 489.7,423 512,423 512,445.2 489.7,445.2 489.7,467.5 512,467.5 512,489.7 489.7,489.7 489.7,512 467.5,512 467.5,489.7 445.2,489.7 445.2,512 423,512 423,489.7 400.7,489.7 400.7,512 378.4,512 378.4,489.7 356.2,489.7 356.2,512 333.9,512 333.9,489.7 311.7,489.7 311.7,512 289.4,512 289.4,489.7 267.1,489.7 267.1,512 244.9,512 244.9,489.7 222.6,489.7 222.6,512 200.3,512 200.3,489.7 178.1,489.7 178.1,512 155.8,512 155.8,489.7 133.6,489.7 133.6,512 111.3,512 111.3,489.7 89,489.7 89,512 66.8,512 66.8,489.7 44.5,489.7 44.5,512 22.3,512 22.3,489.7 0,489.7 0,467.5 22.3,467.5 22.3,445.2 0,445.2 0,423 22.3,423 22.3,400.7 0,400.7 0,378.4 22.3,378.4 22.3,356.2 0,356.2 0,333.9 22.3,333.9 22.3,311.7 0,311.7 0,289.4 22.3,289.4 22.3,267.1 0,267.1 0,244.9 22.3,244.9 22.3,222.6 0,222.6 0,200.3 22.3,200.3 22.3,178.1 0,178.1 0,155.8 22.3,155.8 22.3,133.6 0,133.6 0,111.3 22.3,111.3 22.3,89 0,89 0,66.8 22.3,66.8 22.3,44.5 0,44.5\\\"/>',\\n\\n\\t\\t// Cog\\n\\t\\t'<g transform=\\\"rotate(90 256 256)\\\"><polygon points=\\\"188,34.3 188,0 324,0 324,34.3 414,86.3 443.7,69.1 511.7,186.9 482,204 482,308 511.7,325.1 443.7,442.9 414,425.7 324,477.7 324,512 188,512 188,477.7 98,425.7 68.3,442.9 0.3,325.1 30,308 30,204 0.3,186.9 68.3,69.1 98,86.3\\\"/></g>',\\n\\n\\t\\t// Heptagon\\n\\t\\t'<polygon points=\\\"256,0 456.1,96.4 505.6,313 367.1,486.6 144.9,486.6 6.4,313 55.9,96.4\\\"/>',\\n\\n\\t\\t// Zigzag\\n\\t\\t'<polygon points=\\\"0,32 32,0 64,32 96,0 128,32 160,0 192,32 224,0 256,32 288,0 320,32 352,0 384,32 416,0 448,32 480,0 480,0 512,32 480,64 512,96 480,128 512,160 480,192 512,224 480,256 512,288 480,320 512,352 480,384 512,416 480,448 512,480 512,480 480,512 448,480 416,512 384,480 352,512 320,480 288,512 256,480 224,512 192,480 160,512 128,480 96,512 64,480 32,512 32,512 0,480 32,448 0,416 32,384 0,352 32,320 0,288 32,256 0,224 32,192 0,160 32,128 0,96 32,64\\\"/>',\\n\\n\\n\\t\\t// Ripples (Waves 14)\\n\\t\\t'<path d=\\\"M 0 20 C 0 10 10 0 20 0 C 26 0 32 6 38 6 C 44 6 50 0 56 0 C 62 0 68 6 74 6 C 80 6 86 0 92 0 C 98 0 104 6 110 6 C 116 6 122 0 128 0 C 134 0 140 6 146 6 C 152 6 158 0 164 0 C 170 0 176 6 182 6 C 188 6 194 0 200 0 C 206 0 212 6 218 6 C 224 6 230 0 236 0 C 242 0 248 6 254 6 C 260 6 266 0 272 0 C 278 0 284 6 290 6 C 296 6 302 0 308 0 C 314 0 320 6 326 6 C 332 6 338 0 344 0 C 350 0 356 6 362 6 C 368 6 374 0 380 0 C 386 0 392 6 398 6 C 404 6 410 0 416 0 C 422 0 428 6 434 6 C 440 6 446 0 452 0 C 458 0 464 6 470 6 C 476 6 482 0 492 0 C 502 0 512 10 512 20 C 512 26 506 32 506 38 C 506 44 512 50 512 56 C 512 62 506 68 506 74 C 506 80 512 86 512 92 C 512 98 506 104 506 110 C 506 116 512 122 512 128 C 512 134 506 140 506 146 C 506 152 512 158 512 164 C 512 170 506 176 506 182 C 506 188 512 194 512 200 C 512 206 506 212 506 218 C 506 224 512 230 512 236 C 512 242 506 248 506 254 C 506 260 512 266 512 272 C 512 278 506 284 506 290 C 506 296 512 302 512 308 C 512 314 506 320 506 326 C 506 332 512 338 512 344 C 512 350 506 356 506 362 C 506 368 512 374 512 380 C 512 386 506 392 506 398 C 506 404 512 410 512 416 C 512 422 506 428 506 434 C 506 440 512 446 512 452 C 512 458 506 464 506 470 C 506 476 512 482 512 492 C 512 502 502 512 492 512 C 486 512 480 506 474 506 C 468 506 462 512 456 512 C 450 512 444 506 438 506 C 432 506 426 512 420 512 C 414 512 408 506 402 506 C 396 506 390 512 384 512 C 378 512 372 506 366 506 C 360 506 354 512 348 512 C 342 512 336 506 330 506 C 324 506 318 512 312 512 C 306 512 300 506 294 506 C 288 506 282 512 276 512 C 270 512 264 506 258 506 C 252 506 246 512 240 512 C 234 512 228 506 222 506 C 216 506 210 512 204 512 C 198 512 192 506 186 506 C 180 506 174 512 168 512 C 162 512 156 506 150 506 C 144 506 138 512 132 512 C 126 512 120 506 114 506 C 108 506 102 512 96 512 C 90 512 84 506 78 506 C 72 506 66 512 60 512 C 54 512 48 506 42 506 C 36 506 30 512 20 512 C 10 512 0 502 0 492 C 0 486 6 480 6 474 C 6 468 0 462 0 456 C 0 450 6 444 6 438 C 6 432 0 426 0 420 C 0 414 6 408 6 402 C 6 396 0 390 0 384 C 0 378 6 372 6 366 C 6 360 0 354 0 348 C 0 342 6 336 6 330 C 6 324 0 318 0 312 C 0 306 6 300 6 294 C 6 288 0 282 0 276 C 0 270 6 264 6 258 C 6 252 0 246 0 240 C 0 234 6 228 6 222 C 6 216 0 210 0 204 C 0 198 6 192 6 186 C 6 180 0 174 0 168 C 0 162 6 156 6 150 C 6 144 0 138 0 132 C 0 126 6 120 6 114 C 6 108 0 102 0 96 C 0 90 6 84 6 78 C 6 72 0 66 0 60 C 0 54 6 48 6 42 C 6 36 0 30 0 20 Z\\\"/>',\\n\\n\\t\\t// Ridged Hexagon\\n\\t\\t'<polygon points=\\\"128,34.3 216,34.3 216,0 296,0 296,34.3 384,34.3 428,110.5 457.7,93.4 497.7,162.6 468,179.8 512,256 468,332.2 497.7,349.4 457.7,418.6 428,401.5 384,477.7 296,477.7 296,512 216,512 216,477.7 128,477.7 84,401.5 54.3,418.6 14.3,349.4 44,332.2 0,256 44,179.8 14.3,162.6 54.3,93.4 84,110.5\\\"/>',\\n\\n\\t\\t// Splat (Waves 6)\\n\\t\\t'<path d=\\\"M 0 16 C 0 8 8 0 16 0 C 32 0 48 16 64 16 C 80 16 96 0 112 0 C 128 0 144 16 160 16 C 176 16 192 0 208 0 C 224 0 240 16 256 16 C 272 16 288 0 304 0 C 320 0 336 16 352 16 C 368 16 384 0 400 0 C 416 0 432 16 448 16 C 464 16 480 0 496 0 C 504 0 512 8 512 16 C 512 32 496 48 496 64 C 496 80 512 96 512 112 C 512 128 496 144 496 160 C 496 176 512 192 512 208 C 512 224 496 240 496 256 C 496 272 512 288 512 304 C 512 320 496 336 496 352 C 496 368 512 384 512 400 C 512 416 496 432 496 448 C 496 464 512 480 512 496 C 512 504 504 512 496 512 C 480 512 464 496 448 496 C 432 496 416 512 400 512 C 384 512 368 496 352 496 C 336 496 320 512 304 512 C 288 512 272 496 256 496 C 240 496 224 512 208 512 C 192 512 176 496 160 496 C 144 496 128 512 112 512 C 96 512 80 496 64 496 C 48 496 32 512 16 512 C 8 512 0 504 0 496 C 0 480 16 464 16 448 C 16 432 0 416 0 400 C 0 384 16 368 16 352 C 16 336 0 320 0 304 C 0 288 16 272 16 256 C 16 240 0 224 0 208 C 0 192 16 176 16 160 C 16 144 0 128 0 112 C 0 96 16 80 16 64 C 16 48 0 32 0 16 Z\\\"/>',\\n\\n\\t\\t// Cloud (8)\\n\\t\\t'<path d=\\\"M 64 32 A 32 32 0 0 1 128 32 A 32 32 0 0 1 192 32 A 32 32 0 0 1 256 32 A 32 32 0 0 1 320 32 A 32 32 0 0 1 384 32 A 32 32 0 0 1 448 32 A 32 32 0 1 1 480 64 A 32 32 0 0 1 480 128 A 32 32 0 0 1 480 192 A 32 32 0 0 1 480 256 A 32 32 0 0 1 480 320 A 32 32 0 0 1 480 384 A 32 32 0 0 1 480 448 A 32 32 0 1 1 448 480 A 32 32 0 0 1 384 480 A 32 32 0 0 1 320 480 A 32 32 0 0 1 256 480 A 32 32 0 0 1 192 480 A 32 32 0 0 1 128 480 A 32 32 0 0 1 64 480 A 32 32 0 1 1 32 448 A 32 32 0 0 1 32 384 A 32 32 0 0 1 32 320 A 32 32 0 0 1 32 256 A 32 32 0 0 1 32 192 A 32 32 0 0 1 32 128 A 32 32 0 0 1 32 64 A 32 32 0 1 1 64 32 Z\\\"/>',\\n\\n\\n\\t\\t// Framed Square\\n\\t\\t'<path d=\\\"M 0 64 A 64 64 0 0 0 64 0 A 2000 2000 0 0 0 448 0 A 64 64 0 0 0 512 64 A 2000 2000 0 0 0 512 448 A 64 64 0 0 0 448 512 A 2000 2000 0 0 0 64 512 A 64 64 0 0 0 0 448 A 2000 2000 0 0 0 0 64 Z\\\"/>',\\n\\n\\t\\t// Pentagon\\n\\t\\t'<polygon points=\\\"256,0 499.5,176.9 406.5,463.1 105.5,463.1 12.5,176.9\\\"/>',\\n\\n\\t\\t// Scalloped (10)\\n\\t\\t'<path d=\\\"M 0 0 A 42 42 0 0 0 51.2 0 A 42 42 0 0 0 102.4 0 A 42 42 0 0 0 153.6 0 A 42 42 0 0 0 204.8 0 A 42 42 0 0 0 256 0 A 42 42 0 0 0 307.2 0 A 42 42 0 0 0 358.4 0 A 42 42 0 0 0 409.6 0 A 42 42 0 0 0 460.8 0 A 42 42 0 0 0 512 0 A 42 42 0 0 0 512 51.2 A 42 42 0 0 0 512 102.4 A 42 42 0 0 0 512 153.6 A 42 42 0 0 0 512 204.8 A 42 42 0 0 0 512 256 A 42 42 0 0 0 512 307.2 A 42 42 0 0 0 512 358.4 A 42 42 0 0 0 512 409.6 A 42 42 0 0 0 512 460.8 A 42 42 0 0 0 512 512 A 42 42 0 0 0 460.8 512 A 42 42 0 0 0 409.6 512 A 42 42 0 0 0 358.4 512 A 42 42 0 0 0 307.2 512 A 42 42 0 0 0 256 512 A 42 42 0 0 0 204.8 512 A 42 42 0 0 0 153.6 512 A 42 42 0 0 0 102.4 512 A 42 42 0 0 0 51.2 512 A 42 42 0 0 0 0 512 A 42 42 0 0 0 0 460.8 A 42 42 0 0 0 0 409.6 A 42 42 0 0 0 0 358.4 A 42 42 0 0 0 0 307.2 A 42 42 0 0 0 0 256 A 42 42 0 0 0 0 204.8 A 42 42 0 0 0 0 153.6 A 42 42 0 0 0 0 102.4 A 42 42 0 0 0 0 51.2 A 42 42 0 0 0 0 0 Z\\\"/>',\\n\\n\\t\\t// Baroque\\n\\t\\t'<path d=\\\"M 0 32 A 24 24 0 0 0 32 0 C 128 0 240 64 256 0 C 272 64 384 0 480 0 A 24 24 0 0 0 512 32 C 512 128 448 240 512 256 C 448 272 512 384 512 480 A 24 24 0 0 0 480 512 C 384 512 272 448 256 512 C 240 448 128 512 32 512 A 24 24 0 0 0 0 480 C 0 384 64 272 0 256 C 64 240 0 128 0 32 Z\\\"/>',\\n\\n\\n\\t\\t// Ferrofluid (Waves 17)\\n\\t\\t'<path d=\\\"M 0 14 C 0 7 7 0 14 0 C 24 0 29 12 34 12 C 39 12 44 0 49 0 C 54 0 59 17 64 17 C 69 17 74 0 79 0 C 84 0 89 20 94 20 C 99 20 104 0 109 0 C 114 0 119 22 124 22 C 129 22 134 0 139 0 C 144 0 149 23.2 154 23.2 C 159 23.2 164 0 169 0 C 174 0 179 24 184 24 C 189 24 194 0 199 0 C 204 0 209 24 214 24 C 219 24 224 0 229 0 C 234 0 239 24 244 24 C 249 24 254 0 259 0 C 264 0 269 24 274 24 C 279 24 284 0 289 0 C 294 0 299 24 304 24 C 309 24 314 0 319 0 C 324 0 329 24 334 24 C 339 24 344 0 349 0 C 354 0 359 23.2 364 23.2 C 369 23.2 374 0 379 0 C 384 0 389 22 394 22 C 399 22 404 0 409 0 C 414 0 419 20 424 20 C 429 20 434 0 439 0 C 444 0 449 17 454 17 C 459 17 464 0 469 0 C 474 0 479 12 484 12 C 489 12 494 0 498 0 C 505 0 512 7 512 14 C 512 24 500 29 500 34 C 500 39 512 44 512 49 C 512 54 495 59 495 64 C 495 69 512 74 512 79 C 512 84 492 89 492 94 C 492 99 512 104 512 109 C 512 114 490 119 490 124 C 490 129 512 134 512 139 C 512 144 488.8 149 488.8 154 C 488.8 159 512 164 512 169 C 512 174 488 179 488 184 C 488 189 512 194 512 199 C 512 204 488 209 488 214 C 488 219 512 224 512 229 C 512 234 488 239 488 244 C 488 249 512 254 512 259 C 512 264 488 269 488 274 C 488 279 512 284 512 289 C 512 294 488 299 488 304 C 488 309 512 314 512 319 C 512 324 488 329 488 334 C 488 339 512 344 512 349 C 512 354 488.8 359 488.8 364 C 488.8 369 512 374 512 379 C 512 384 490 389 490 394 C 490 399 512 404 512 409 C 512 414 492 419 492 424 C 492 429 512 434 512 439 C 512 444 495 449 495 454 C 495 459 512 464 512 469 C 512 474 500 479 500 484 C 500 489 512 494 512 498 C 512 505 505 512 498 512 C 488 512 483 500 478 500 C 473 500 468 512 463 512 C 458 512 453 495 448 495 C 443 495 438 512 433 512 C 428 512 423 492 418 492 C 413 492 408 512 403 512 C 398 512 393 490 388 490 C 383 490 378 512 373 512 C 368 512 363 488.8 358 488.8 C 353 488.8 348 512 343 512 C 338 512 333 488 328 488 C 323 488 318 512 313 512 C 308 512 303 488 298 488 C 293 488 288 512 283 512 C 278 512 273 488 268 488 C 263 488 258 512 253 512 C 248 512 243 488 238 488 C 233 488 228 512 223 512 C 218 512 213 488 208 488 C 203 488 198 512 193 512 C 188 512 183 488 178 488 C 173 488 168 512 163 512 C 158 512 153 488.8 148 488.8 C 143 488.8 138 512 133 512 C 128 512 123 490 118 490 C 113 490 108 512 103 512 C 98 512 93 492 88 492 C 83 492 78 512 73 512 C 68 512 63 495 58 495 C 53 495 48 512 43 512 C 38 512 33 500 28 500 C 23 500 18 512 14 512 C 7 512 0 505 0 498 C 0 488 12 483 12 478 C 12 473 0 468 0 463 C 0 458 17 453 17 448 C 17 443 0 438 0 433 C 0 428 20 423 20 418 C 20 413 0 408 0 403 C 0 398 22 393 22 388 C 22 383 0 378 0 373 C 0 368 23.2 363 23.2 358 C 23.2 353 0 348 0 343 C 0 338 24 333 24 328 C 24 323 0 318 0 313 C 0 308 24 303 24 298 C 24 293 0 288 0 283 C 0 278 24 273 24 268 C 24 263 0 258 0 253 C 0 248 24 243 24 238 C 24 233 0 228 0 223 C 0 218 24 213 24 208 C 24 203 0 198 0 193 C 0 188 24 183 24 178 C 24 173 0 168 0 163 C 0 158 23.2 153 23.2 148 C 23.2 143 0 138 0 133 C 0 128 22 123 22 118 C 22 113 0 108 0 103 C 0 98 20 93 20 88 C 20 83 0 78 0 73 C 0 68 17 63 17 58 C 17 53 0 48 0 43 C 0 38 12 33 12 28 C 12 23 0 18 0 14 Z\\\"/>',\\n\\n\\t\\t// Artisan\\n\\t\\t'<path d=\\\"M 0 230 L 175 232 L 2 224 C 0 80 50 0 200 0 C 450 0 512 70 512 313 L 420 305 L 511 320 C 512 357 445 512 265 512 C 80 512 0 480 0 230 Z\\\"/>',\\n\\n\\t\\t// Icositrigon (23 sides)\\n\\t\\t'<polygon points=\\\"256,0 325.1,9.5 389,37.3 443.1,81.3 483.3,138.2 506.6,203.9 511.4,273.5 497.2,341.7 465.1,403.6 417.6,454.6 358,490.8 290.9,509.6 221.1,509.6 154,490.8 94.4,454.6 46.9,403.6 14.8,341.7 0.6,273.5 5.4,203.9 28.7,138.2 68.9,81.3 123,37.3 186.9,9.5\\\"/>',\\n\\t\\t'<polygon points=\\\"256,0 325.1,9.5 389,37.3 443.1,81.3 483.3,138.2 506.6,203.9 511.4,273.5 497.2,341.7 465.1,403.6 417.6,454.6 358,490.8 290.9,509.6 221.1,509.6 154,490.8 94.4,454.6 46.9,403.6 14.8,341.7 0.6,273.5 5.4,203.9 28.7,138.2 68.9,81.3 123,37.3 186.9,9.5\\\"/>'\\n\\t];\\n}\\n\",\"keccak256\":\"0xe7b1923951c2dd1d61aa34c35bc433161ff3a957ccf2198f3dcb0bacea943ceb\",\"license\":\"MIT\"},\"contracts/MondrianShapes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ncontract MondrianShapes {\\n\\n\\t// -------------------------\\n\\t// Public Getters for shapes\\n\\n\\tfunction getShape(uint256 index) external view returns (string memory) {\\n\\t\\treturn shapes[index];\\n\\t}\\n\\n\\tfunction getShapeName(uint256 index) external view returns (string memory) {\\n\\t\\treturn shapeNames[index];\\n\\t}\\n\\n\\tfunction getShapeRarityMillibit(uint256 index) external view returns (uint256) {\\n\\t\\treturn shapeRarityMillibit[index];\\n\\t}\\n\\n\\t// ----------------------\\n\\t// Shape Data - determines the inner shape on an NFT\\n\\n\\tstring[32] private shapeNames = [\\n\\t\\t\\\"None\\\",\\n\\t\\t\\\"None\\\",\\n\\t\\t\\\"None\\\",\\n\\t\\t\\\"None\\\",\\n\\n\\t\\t\\\"None\\\",\\n\\t\\t\\\"Circle\\\",\\n\\t\\t\\\"Circle\\\",\\n\\t\\t\\\"Four Circles\\\",\\n\\n\\t\\t\\\"Small Circle\\\",\\n\\t\\t\\\"Large Circle\\\",\\n\\t\\t\\\"Ethereum\\\",\\n\\t\\t\\\"Heart\\\",\\n\\n\\t\\t\\\"Star\\\",\\n\\t\\t\\\"Clover\\\",\\n\\t\\t\\\"Rose\\\",\\n\\t\\t\\\"Cross\\\",\\n\\n\\t\\t\\\"Spiral\\\",\\n\\t\\t\\\"Star of David\\\",\\n\\t\\t\\\"Triangle\\\",\\n\\t\\t\\\"Crescent Moon\\\",\\n\\n\\t\\t\\\"Daisy\\\",\\n\\t\\t\\\"Flower\\\",\\n\\t\\t\\\"Resizing Circle\\\",\\n\\t\\t\\\"Shifting Square\\\",\\n\\n\\t\\t\\\"Watcher\\\",\\n\\t\\t\\\"Sun\\\",\\n\\t\\t\\\"Shuriken\\\",\\n\\t\\t\\\"Cartwheel\\\",\\n\\n\\t\\t\\\"Rocket\\\",\\n\\t\\t\\\"Clock\\\",\\n\\t\\t\\\"Cat\\\",\\n\\t\\t\\\"Rare Vitalik\\\"\\n\\t];\\n\\n\\tuint256[32] private shapeRarityMillibit = [\\n\\t\\t0, 0, 0, 0,\\n\\t\\t0, 1504, 1504, 2590,\\n\\t\\t2650, 2713, 2778, 2847,\\n\\t\\t2919, 2995, 3075, 3160,\\n\\t\\t3250, 3347, 3450, 3561,\\n\\t\\t3681, 3812, 3957, 4117,\\n\\t\\t4298, 4504, 4745, 5035,\\n\\t\\t5397, 5883, 6620, 8205\\n\\t];\\n\\n\\tstring[32] private shapes = [\\n\\t\\t// No Shape (None)\\n\\t\\t'',\\n\\t\\t'',\\n\\t\\t'',\\n\\t\\t'',\\n\\n\\t\\t'',\\n\\n\\t\\t// Circle (Still)\\n\\t\\t'<circle cx=\\\"256\\\" cy=\\\"256\\\" r=\\\"96\\\"/>',\\n\\t\\t'<circle cx=\\\"256\\\" cy=\\\"256\\\" r=\\\"96\\\"/>',\\n\\n\\t\\t// Four Circles (Still)\\n\\t\\t'<circle cx=\\\"180\\\" cy=\\\"180\\\" r=\\\"48\\\"/><circle cx=\\\"332\\\" cy=\\\"180\\\" r=\\\"48\\\"/><circle cx=\\\"180\\\" cy=\\\"332\\\" r=\\\"48\\\"/><circle cx=\\\"332\\\" cy=\\\"332\\\" r=\\\"48\\\"/>',\\n\\n\\n\\t\\t// Small Circle (Still)\\n\\t\\t'<circle cx=\\\"256\\\" cy=\\\"256\\\" r=\\\"64\\\"/>',\\n\\n\\t\\t// Large Circle (Still)\\n\\t\\t'<circle cx=\\\"256\\\" cy=\\\"256\\\" r=\\\"128\\\"/>',\\n\\n\\t\\t// Ethereum (Animated)\\n\\t\\t'<g><polygon points=\\\"144,240 256,288 368,240 256,64\\\"/><animateTransform type=\\\"translate\\\" dur=\\\"4.3s\\\" values=\\\"0 0;0 0;0 14;0 0\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g><g><polygon points=\\\"144,272 256,448 368,272 256,320\\\"/><animateTransform type=\\\"translate\\\" dur=\\\"6.7s\\\" values=\\\"0 0;0 0;0 -14;0 0\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Heart (Slow Animation)\\n\\t\\t'<g transform=\\\"translate(256 256)\\\"><path d=\\\"M 256 428 C 0 256 128 0 256 180 C 384 0 512 256 256 428 Z\\\" transform=\\\"translate(-256 -256)\\\"/><animateTransform type=\\\"scale\\\" dur=\\\"1.4s\\\" values=\\\"1 1;1 1;1 1;1 1;1 1;1 1;1 1;1 1;1 1;1.01 0.992;1.005 0.99;1.002 0.995;1 1\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><animateTransform type=\\\"scale\\\" dur=\\\"17s\\\" values=\\\"1 1;1 1;1.1 1;1 1\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><animateTransform type=\\\"scale\\\" dur=\\\"23s\\\" values=\\\"1 1;1 1;1 1.1;1 1\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\n\\t\\t// Star (Animated) \\n\\t\\t'<g transform=\\\"translate(256, 256)\\\"><polygon points=\\\"0,-166.7 36.7,-50.7 158.5,-51.5 59.5,19.2 98,134.8 0.1,62.5 -98,134.8 -59.4,19.4 -158.5,-51.5 -36.9,-50.5\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"71s\\\" values=\\\"0;0;1;-1;0;0;0;0;0;0;0;0;0;-2;0;0.5;2;2;10;30;30;35;36;36;36;38;8;0;0;0;0;0;0;0;0;0;0;-31;-36;-36;-45;-45;-60;-60;-66;-66;-70;-72;-72;-72;-70;-71;-71;-72\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Clover (Slow Animation)\\n\\t\\t'<g><path d=\\\"M 216 216 C 96 96 416 96 296 216 C 416 96 416 416 296 296 C 416 416 96 416 216 296 C 96 416 96 96 216 216 Z\\\"/><animateTransform type=\\\"translate\\\" dur=\\\"7s\\\" values=\\\"0 0;0 0;0 0;0 2;0 2;2 0;2 0;2 0;2 -2;0 -2;0 -2;0 -2;0 -2;-2 -2;-2 0;-2 0;-2 0;-2 0;0 0\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Rose (Animated)\\n\\t\\t'<g transform=\\\"translate(256 256)\\\"><path d=\\\"M -21.8 -30 C -170 -150 170 -150 21.8 -30 C 90.1 -208 195.2 115.3 35.3 11.5 C 225.7 21.4 -49.4 221.3 0 37.1 C 49.4 221.3 -225.7 21.4 -35.3 11.5 C -195.2 115.3 -90.1 -208 -21.8 -30 Z\\\"/><circle r=\\\"37\\\"/><animateTransform type=\\\"scale\\\" dur=\\\"9s\\\" values=\\\"1 1;0.95 0.95;1.05 1.05;1 1\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"13s\\\" values=\\\"0;0;0;0;7;14;21;28;35;35;36;36;36;36;30;30;40;50;60;60;60;70;70;72\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Cross (Animated)\\n\\t\\t'<g><polygon points=\\\"208,112 304,112 304,208 400,208 400,304 304,304 304,400 208,400 208,304 112,304 112,208 208,208\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"47s\\\" values=\\\"0 256 256;0 256 256;0 256 256;0 256 256;2 256 256;0 256 256;0 256 256;0 256 256;0 256 256;-2 256 256;0 256 256;0 256 256;0 256 256;0 256 256;0 256 256;0 256 256;0 256 256;0 256 256;0 256 256;0 256 256;0 256 256;-45 256 256;-45 256 256;-45 256 256;-45 256 256;-45 256 256;45 256 256;45 256 256;45 256 256;45 256 256;45 256 256;45 256 256;45 256 256;90 256 256\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\n\\t\\t// Spiral (Animated)\\n\\t\\t'<g transform=\\\"translate(256, 256)\\\"><path d=\\\"M 0 150 A 142.5 142.5 0 0 0 135 0 A 128.3 128.3 0 0 0 0 -121.5 A 115.4 115.4 0 0 0 -109.4 0 A 103.9 103.9 0 0 0 0 98.4 A 93.5 93.5 0 0 0 88.6 0 A 84.1 84.1 0 0 0 0 -79.7 A 75.7 75.7 0 0 0 -71.7 0 A 68.2 68.2 0 0 0 0 64.6 A 61.3 61.3 0 0 0 58.1 0 A 55.2 55.2 0 0 0 0 -52.3 A 49.7 49.7 0 0 0 -47.1 0 A 44.7 44.7 0 0 0 0 42.4 A 40.2 40.2 0 0 0 38.1 0 A 36.2 36.2 0 0 0 0 -34.3 A 32.6 32.6 0 0 0 -30.9 0 A 29.3 29.3 0 0 0 0 27.8 A 26.4 26.4 0 0 0 25 0 A 23.8 23.8 0 0 0 0 -22.5 A 21.4 21.4 0 0 0 -20.3 0 A 19.2 19.2 0 0 0 0 18.2 A 17.3 17.3 0 0 0 16.4 0 A 15.6 15.6 0 0 0 0 -14.8 A 14 14 0 0 0 -13.3 0 A 12.6 12.6 0 0 0 0 12 A 1.15 1.15 0 0 0 0 9.7 A 10.2 10.2 0 0 1 -10.8 0 A 11.4 11.4 0 0 1 0 -12 A 12.6 12.6 0 0 1 13.3 0 A 14 14 0 0 1 0 14.8 A 15.6 15.6 0 0 1 -16.4 0 A 17.3 17.3 0 0 1 0 -18.2 A 19.2 19.2 0 0 1 20.3 0 A 21.4 21.4 0 0 1 0 22.5 A 23.8 23.8 0 0 1 -25 0 A 26.4 26.4 0 0 1 0 -27.8 A 29.3 29.3 0 0 1 30.9 0 A 32.6 32.6 0 0 1 0 34.3 A 36.2 36.2 0 0 1 -38.1 0 A 40.2 40.2 0 0 1 0 -42.4 A 44.7 44.7 0 0 1 47.1 0 A 49.7 49.7 0 0 1 0 52.3 A 55.2 55.2 0 0 1 -58.1 0 A 61.3 61.3 0 0 1 0 -64.6 A 68.2 68.2 0 0 1 71.7 0 A 75.7 75.7 0 0 1 0 79.7 A 84.1 84.1 0 0 1 -88.6 0 A 93.5 93.5 0 0 1 0 -98.4 A 103.9 103.9 0 0 1 109.4 0 A 115.4 115.4 0 0 1 0 121.5 A 14.25 14.25 0 0 0 0 150 Z\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"239s\\\" values=\\\"0;0;5;15;30;55;90;90;90;150;270;270;-180;360;-450;-450;540;-630;630;630;720;720;775;360\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Star of David (Small Animation)\\n\\t\\t'<g transform=\\\"translate(256, 256)\\\"><polygon points=\\\"0,144 -41.6,72 -124.7,72 -83.1,0 -124.7,-72 -41.6,-72 0,-144 41.6,-72 124.7,-72 83.1,0 124.7,72 41.6,72\\\"/><animateTransform type=\\\"scale\\\" dur=\\\"17s\\\" values=\\\"1 1;1 1;1.05 1.05;1.05 1.05;1.01 1.01;1 1;1 1;1 1;0.97 0.97;0.97 0.97;1 1;\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"67s\\\" values=\\\"0;0;0;0;0;-1;1;1;0;0;0;-2;3;1;0;0;0;-1;-1;1;-1;0.333;0;0;0\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Triangle (Animated)\\n\\t\\t'<g><polygon points=\\\"256,128 367,320 145,320\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"45s\\\" values=\\\"0 256 256;0 256 256;0 256 256;0 256 256;5 256 256;15 256 256;30 256 256;50 256 256;75 256 256;105 256 256;140 256 256;180 256 256;215 256 256;232 256 256;240 256 256;240 256 256;120 256 256\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Crescent Moon (Small Animation)\\n\\t\\t'<g><path d=\\\"M 165.5 165.5 A 128 128 0 0 0 346.5 346.5 A 160 160 0 0 1 165.5 165.5 Z\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"599s\\\" values=\\\"0 256 256;360 256 256\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\n\\t\\t// Daisy (Slow Animation)\\n\\t\\t'<g transform=\\\"translate(256,256)\\\"><path d=\\\"M -6.9 -50 C -17 -150 17 -150 6.9 -50 C 24.1 -149 56.8 -139.9 20.1 -46.3 C 63.4 -137 92.5 -119.3 31.9 -39.2 C 98 -114.8 121.2 -90 41.2 -29.1 C 125.4 -84.1 141 -53.9 47.6 -16.9 C 143.4 -47.2 150.3 -13.9 50.4 -3.4 C 150.8 -6.7 148.5 27.2 49.4 10.3 C 147 34.2 135.6 66.3 44.8 23.2 C 132.3 72.6 112.7 100.4 36.9 34.4 C 107.9 105.6 81.5 127.1 26.2 43.1 C 75.4 130.8 44.2 144.4 13.6 48.6 C 37.3 146.3 3.6 150.9 0 50.5 C -3.6 150.9 -37.3 146.3 -13.6 48.6 C -44.2 144.4 -75.4 130.8 -26.2 43.1 C -81.5 127.1 -107.9 105.6 -36.9 34.4 C -112.7 100.4 -132.3 72.6 -44.8 23.2 C -135.6 66.3 -147 34.2 -49.4 10.3 C -148.5 27.2 -150.8 -6.7 -50.4 -3.4 C -150.3 -13.9 -143.4 -47.2 -47.6 -16.9 C -141 -53.9 -125.4 -84.1 -41.2 -29.1 C -121.2 -90 -98 -114.8 -31.9 -39.2 C -92.5 -119.3 -63.4 -137 -20.1 -46.3 C -56.8 -139.9 -24.1 -149 -6.9 -50 Z\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"37s\\\" values=\\\"0;0;0;0;0;1;-1;0;0;0;0;0;0;1;1;2;2;3;4;5;6;8;10;12;15;18;21;24;28;32;36;40;45;50;55;60;66;72;77;81;84;86;88;89;89;90;90;90;90;88;88;88;85;83;83;80;80;80;78.26\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Flower (Animated)\\n\\t\\t'<g transform=\\\"translate(256,256)\\\"><rect x=\\\"-22\\\" y=\\\"-19\\\" rx=\\\"15\\\" ry=\\\"10\\\" width=\\\"44\\\" height=\\\"42\\\"/><path d=\\\"M -14.5 -20 C -58.1 -150 58.1 -150 14.5 -20 C 124.7 -101.6 160.6 8.9 23.5 7.6 C 135.2 87.2 41.1 155.5 0 24.7 C -41.1 155.5 -135.2 87.2 -23.5 7.6 C -160.6 8.9 -124.7 -101.6 -14.5 -20 Z\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"23s\\\" values=\\\"0;0;0;0;0;0;0;0;1;-1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;-1;0;0;0;0;0;0;1;-1;1;-1;1;-2;3;-10;-45;-70;-72;-72;-72;-72;-72;-72;-72;-72;-72;-73;-71;-73;-36;-36;-18;-18;-6;-6;0;0;0;0;0;0;-2;0;0;2;0;0;5;5;5;15;15;69;69;72;72;72;72;72;80;100;120;138;144;144;144;144;144\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Resizing Circle (Highly Animated)\\n\\t\\t'<g transform=\\\"translate(256 256)\\\"><circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"128\\\"/><animateTransform type=\\\"scale\\\" dur=\\\"30s\\\" values=\\\"1 1;1 1;1 1;1 1;1 1;1 1;1 1;1 1;1 1;1.2 1.2;1.2 1.2;1.2 1.2;1.2 1.2;1.2 1.2;1.2 1.2;1.55 1.55;1.55 1.55;1.55 1.55;1.55 1.55;1.55 1.55;1.55 1.55;1.55 1.55;0.4 0.4;0.4 0.4;0.4 0.4;0.4 0.4;0.4 0.4;0.4 0.4;0.4 0.4;0.8 0.8;0.8 0.8;0.85 0.8;0.8 0.85;0.8 0.8;0.8 0.8;1.1 1.1;1 1;1 1;1 1;1 1;1 1;1 1;0.75 1.5;0.75 1.5;0.75 1.5;0.75 1.5;0.75 1.5;1.5 0.75;1.5 0.75;1.5 0.75;1.5 0.75;1.5 0.75;1.7 0.3;0.9 1.2;1 1;\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Shifting Square (Highly Animated)\\n\\t\\t'<g transform=\\\"translate(256 256)\\\"><rect x=\\\"-90\\\" y=\\\"-90\\\" width=\\\"180\\\" height=\\\"180\\\"/><animateTransform type=\\\"scale\\\" dur=\\\"23s\\\" values=\\\"1 1;1 1;1 1;1.75 1;1.75 1;0.5 1;0.5 1;1 1\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><animateTransform type=\\\"scale\\\" dur=\\\"37s\\\" values=\\\"1 1;1 1;1 1;1 1.75;1 1.75;1 0.5;1 0.5;1 1\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"97s\\\" values=\\\"0;0;45;45;60;60;30;30;90;90;135;135;180;180;135;150;90\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\n\\t\\t// Watcher (Animated)\\n\\t\\t'<g transform=\\\"translate(256 256)\\\"><path d=\\\"M 256 128 A 128 128 1 1 0 346.5 165.5 A 96 96 0 0 1 256 128\\\" transform=\\\"translate(-256 -256)\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"53s\\\" values=\\\"0;0;0;0;0;0;0;0;0;0;0;90;90;90;90;90;180;180;180;180;180;180;360\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"41s\\\" values=\\\"0;0;60;60;60;60;60;120;120;120;120;240;240;240;240;240;180;180;180;180;300;300;300;360\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"31s\\\" values=\\\"0;0;0;0;0;0;0;0;-72;-72;-72;-72;-144;-144;-144;-144;-216;-216;-216;-288;-288;-360\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Sun (Slow Animation)\\n\\t\\t'<g transform=\\\"translate(256 256)\\\"><circle cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"64\\\"/><animateTransform type=\\\"scale\\\" dur=\\\"11s\\\" values=\\\"1 1;1 1;1.05 1.05;1.05 1.05;1 1\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><g><path id=\\\"sunbeams\\\" d=\\\"  M -5 140 L 5 140 L 5 80 L -5 80 Z M -134.7 38.5 L -131.6 48 L -74.5 29.5 L -77.6 20 Z M -78.2 -116.2 L -86.3 -110.3 L -51.1 -61.8 L -43 -67.7 Z M 86.3 -110.3 L 78.2 -116.2 L 43 -67.7 L 51.1 -61.8 Z M 131.6 48 L 134.7 38.5 L 77.6 20 L 74.5 29.5 Z\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"3.7s\\\" values=\\\"0;1;0\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g><g><use href=\\\"#sunbeams\\\" transform=\\\"rotate(36)\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"3.1s\\\" values=\\\"0;-1;0\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g></g>',\\n\\n\\t\\t// Shuriken (Highly Animated)\\n\\t\\t'<g transform=\\\"translate(256, 256)\\\"><path d=\\\"M 0 -50 C -5 -100 40 -110 75 -90 C 60 -90 30 -80 23 -45 C 0 -35 30 -8 39.1 -31.2 C 75.1 -66.3 110.9 -37.3 117.1 2.5 C 107.8 -9.2 81.3 -26.4 49.5 -10.1 C 27.4 -21.8 25 18.5 48.7 11.1 C 98.6 17.4 98.3 63.5 71.1 93.1 C 74.4 78.5 71.3 47 38.8 32.4 C 34.1 7.8 1.1 31 21.7 45 C 47.9 87.9 11.7 116.5 -28.5 113.6 C -15 107.1 7.7 85.1 -1.2 50.5 C 15.2 31.5 -23.6 20.2 -21.7 45 C -38.9 92.3 -83.8 81.8 -106.6 48.5 C -93.1 55.1 -61.7 59.1 -40.2 30.6 C -15.2 31.5 -30.5 -5.8 -48.7 11.1 C -96.4 27.1 -116.1 -14.5 -104.4 -53.1 C -101.1 -38.5 -84.7 -11.4 -49 -12.4 C -34.1 7.8 -14.5 -27.5 -39.1 -31.2 C -81.3 -58.4 -61.1 -99.9 -23.6 -114.8 C -33 -103 -43.8 -73.3 -20.8 -46 C -27.4 -21.8 12.5 -28.4 0 -50 Z\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"29s\\\" values=\\\"0;0;5;15;30;45;65;90;90;89;94;180;178;90;360;360;1080;1080;900;890;900;900;180;200;540;480;475;360;367;364;360;360\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Cartwheel (Highly Animated)\\n\\t\\t'<g><polygon points=\\\"248,210 249,80 254,80 254,83 258,83 258,80 263,80 264,210 274.1,213 345.3,104.2 357,111.7 287.6,221.6 294.5,229.6 413.2,176.5 419,189.3 301.2,244.2 302.7,254.6 431.2,274.1 429.2,288 300.4,270.5 296,280.1 393.6,366 384.4,376.5 285.5,292.2 276.6,297.9 312.3,422.9 298.9,426.8 261.3,302.4 250.7,302.4 213.1,426.8 199.7,422.9 235.4,297.9 226.5,292.2 127.6,376.5 118.4,366 216,280.1 211.6,270.5 82.8,288 80.8,274.1 209.3,254.6 210.8,244.2 93,189.3 98.8,176.5 217.5,229.6 224.4,221.6 155,111.7 166.7,104.2 237.9,213\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"34s\\\" values=\\\"0 256 256;0 256 256;589.09 256 256;589.09 256 256;589.09 256 256;589.09 256 256;589.09 256 256;589.09 256 256;\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"38s\\\" values=\\\"0 256 256;0 256 256;0 256 256;0 256 256;687.27 256 256;687.27 256 256;687.27 256 256;687.27 256 256;\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"46s\\\" values=\\\"0 256 256;0 256 256;0 256 256;0 256 256;0 256 256;0 256 256;0 256 256;-981 256 256;\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\n\\t\\t// Rocket (Highly Animated)\\n\\t\\t'<g transform=\\\"translate(256, 256)\\\"><path d=\\\"M 0 -150 C 10 -140 60 -100 48 50 C 56 45 88 82 92 178 C 84 162 60 146 40 146 C 40.3 158 -40.3 158 -40 146 C -60 146 -84 162 -92 178 C -88 82 -56 45 -48 50 C -60 -100 -10 -140 0 -150 Z\\\"/><animateTransform type=\\\"translate\\\" dur=\\\"13s\\\" values=\\\"0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 2;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 3;0 0;0 1;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 1;0 0;0 1;0 0;0 1;0 0;0 1;0 0;0 2;0 0;0 2;0 0;0 2;0 0;0 2;0 0;0 3;0 0;0 3;0 0;0 0;0 3;0 0;0 4;0 0;0 4;0 0;0 5;0 0;0 6;0 0;0 0;0 7;0 0;0 8;0 0;0 9;0 0;0 10;0 0;0 0;0 11;0 0;0 12;0 0;0 0;0 13;0 0;0 14;0 0;0 15;0 0;0 16;0 0;0 0;0 17;0 0;0 18;0 0;0 19;0 0;0 0;0 20;0 0;0 21;0 0;0 0;0 0;0 22;0 18;0 8;0 -10;0 -60;0 -180;0 -400;500 -500;500 0;480 0;460 0;440 0;420 0;400 0;380 0;360 0;340 0;320 0;300 0;280 0;260 0;240 0;220 0;200 0;180 0;160 0;145 0;130 0;115 0;100 0;85 0;70 0;60 0;50 0;40 0;30 0;20 0;12 0;6 0;0 0\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Clock (Animated)\\n\\t\\t'<use href=\\\"#clockCirclesLarge\\\"/><use href=\\\"#clockCirclesSmall\\\" transform=\\\"rotate(30, 256, 256)\\\"/><use href=\\\"#clockCirclesSmall\\\" transform=\\\"rotate(60, 256, 256)\\\"/><g><path d=\\\"M 256 100 A 1000 1000 0 0 1 262 180 A 16 16 0 0 1 261 210 A 109 109 0 0 0 270 256 A 14 14 0 0 1 242 256 A 109 109 0 0 0 251 210 A 16 16 0 0 1 250 180 A 1000 1000 0 0 1 256 100 Z\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"43200s\\\" values=\\\"0 256 256; 360 256 256\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g><g><path d=\\\"M 256 68 A 800 800 0 0 1 262 150 A 12 12 0 0 1 261 170 A 315 315 0 0 0 266 256 A 10 10 0 0 1 246 256 A 315 315 0 0 0 251 170 A 12 12 0 0 1 250 150 A 800 800 0 0 1 256 68 Z\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"3600s\\\" values=\\\"0 256 256; 360 256 256\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g><g><path d=\\\"M 256 48 A 2400 2400 0 0 0 262 256 A 6 6 0 0 1 250 256 A 2400 2400 0 0 0 256 48 Z\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"60s\\\" values=\\\"0 256 256; 360 256 256\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',\\n\\n\\t\\t// Cat (Slight animation)\\n\\t\\t'<g><path transform=\\\"translate(1205 -795)\\\" d=\\\"M-827.3,979.5c0,0-2.2-13.1-5.2-17.1c-3.8-5.1-16.4-12.1-16.4-12.1c-2.6,3.7,3.6-9.8,7.3-22.7c0,0-24.2,3.2-46.8,27.6 c-6.4,7-17.8,38.6-17.8,38.6l-44.7,20.5c-31.1,12.9-82.7,26.2-82.7,97.7v30.5c-2.5-1.7-15.7-12.7-15.5-29.9 c0.1-13.6,1.9-27.5,3.6-39.9c3.1-22.7,5.5-47.1-3.7-57.6c-4.2-4.8-10.2-7.3-17.7-7.3c-4.9,0-8.9,4-8.9,8.9c0,4.9,4,8.9,8.9,8.9 c2.2,0,3.6,0.4,4.3,1.2c3.8,4.4,1.5,28.1-0.6,43.4c-1.7,12.9-3.7,27.5-3.7,42.2c0,16.2,5.6,31.4,15.7,42.8 c11.5,12.9,27.7,19.7,46.8,19.7c0,0,0,0,0,0h62.5h8.9h17.9c4.9,0,8.9-4,8.9-8.9s-4-8.9-8.9-8.9l-19.6,0l9.5-31.3 c0-4.5-1-8.8-2.7-12.6c-7.1-12.1-19.9-19.6-34-19.6c-6.2,0-12,1.4-17.5,4.1l-2.9-5.8c6.4-3.2,13.2-4.8,20.4-4.8 c16.8,0,32.3,9.2,40.3,24l0,0l0,0c0,0,33.1,50.7,36.4,57.9c0,0.1,0.1,0.1,0.1,0.2c0.9,2.7,3.1,4.7,5.9,5.3c0.1,0,0.2,0,0.3,0.1 c0.5,0.1,0.9,0.3,1.4,0.3h9.8c4.4,0,8.1-3.6,8.1-8.1c0-4.4-3.6-8.1-8.1-8.1h0.2c0,0-26.6-47.4-21.4-64.2 c23.7-37.2,36.5-72.5,36.5-72.5c5.1-11.6,18.2-20.5,20-21.7c4-2.7,9.5-6.1,10-11.3C-822.2,986.7-826,981.7-827.3,979.5z\\\"/><animateTransform type=\\\"translate\\\" dur=\\\"12s\\\" values=\\\"0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;-1 0;-2 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;-1 0;0 0;0 0;-1 0;4 -3;5 0;2 0;0 0;0 0;0 0;-2 0;0 0;0 0;-1 0;-3 0;30 -30;40 0;30 0;21 0;13 0;7 0;4 0;2 0;1 0;0 0;\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g>',  // Attribution: Vectors and icons by <a href=\\\"https://www.svgrepo.com\\\" target=\\\"_blank\\\">SVG Repo</a>\\n\\n\\t\\t// Rare Vitalik with Eyebrow (animated eyebrow, shape has no interior)\\n\\t\\t'<g transform=\\\"translate(256 256)\\\"><g><g transform=\\\"translate(-150,177.5) scale(0.100000,-0.100000)\\\" fill=\\\"#000000\\\" stroke=\\\"none\\\"> <path d=\\\"M1335 3365 c-33 -7 -85 -23 -115 -35 -61 -24 -180 -108 -203 -143 -8 -13 -37 -32 -64 -42 -112 -42 -251 -157 -372 -309 -76 -96 -126 -186 -159 -284 -24 -71 -26 -91 -26 -252 0 -147 3 -189 22 -263 12 -48 29 -101 37 -117 20 -40 20 -40 -24 -40 -77 0 -138 -67 -148 -164 -20 -193 156 -573 299 -647 45 -23 111 -25 128 -4 21 25 30 17 30 -29 0 -65 36 -230 61 -284 12 -26 57 -81 98 -122 66 -66 94 -85 210 -143 73 -37 140 -67 147 -67 7 0 28 -13 46 -28 113 -98 333 -167 533 -167 105 0 125 3 161 22 85 45 153 138 170 233 4 19 22 53 40 75 82 101 151 266 174 415 l13 85 67 67 c116 116 176 276 168 451 -5 119 -24 158 -86 171 -41 10 -42 11 -42 49 0 22 11 64 25 93 69 146 100 353 91 614 -8 262 -38 349 -168 485 -152 161 -317 245 -628 318 -169 40 -377 46 -468 12 -35 -13 -29 -14 83 -12 202 3 394 -28 595 -98 173 -61 265 -118 380 -236 86 -88 134 -172 154 -272 20 -94 21 -384 2 -518 -15 -109 -52 -239 -67 -239 -12 0 -11 18 1 60 22 72 12 296 -18 413 -10 39 -40 92 -48 84 -2 -2 5 -48 16 -103 27 -127 29 -327 5 -410 -10 -33 -13 -68 -9 -87 5 -27 4 -29 -12 -22 -92 38 -227 60 -310 49 -60 -7 -70 -17 -76 -74 -2 -26 1 -34 11 -32 68 15 121 22 163 22 54 0 197 -27 213 -40 15 -13 -1 -398 -21 -500 -9 -47 -29 -112 -45 -145 -15 -34 -35 -104 -45 -160 -29 -170 -84 -306 -168 -415 -26 -34 -45 -71 -49 -95 -9 -53 -54 -123 -104 -161 -63 -48 -143 -60 -263 -39 -178 30 -331 86 -395 144 -16 16 -46 34 -65 41 -56 22 -190 90 -250 127 -182 115 -244 260 -266 623 -6 88 -9 108 -16 85 -6 -23 -15 -104 -18 -175 0 -11 -59 -40 -82 -40 -150 0 -385 504 -314 674 20 48 61 76 110 76 46 0 71 -14 133 -73 48 -46 67 -45 28 1 -29 34 -31 42 -11 42 47 0 125 -121 147 -228 7 -34 18 -61 24 -59 15 5 44 212 54 399 9 153 8 173 -10 235 -22 79 -26 232 -6 304 7 29 28 65 56 95 24 27 62 76 84 108 47 70 137 257 137 286 0 11 6 20 13 20 16 -1 82 -149 97 -221 12 -55 9 -191 -6 -251 -9 -39 9 -35 29 7 49 104 81 338 57 425 -11 38 -14 42 -21 25 -4 -11 -8 -53 -8 -92 -1 -40 -4 -73 -9 -73 -4 0 -18 28 -32 61 -33 85 -74 139 -104 139 -29 0 -41 -17 -94 -137 -22 -51 -52 -107 -65 -125 -13 -18 -27 -40 -30 -48 -3 -8 -32 -47 -64 -85 -33 -39 -66 -88 -74 -110 -21 -59 -18 -251 5 -351 16 -73 17 -97 7 -235 -11 -158 -17 -199 -31 -199 -5 0 -11 8 -15 18 -3 11 -25 41 -49 67 -39 42 -50 48 -93 52 -78 8 -90 22 -123 155 -99 401 -35 649 240 930 95 96 175 156 247 183 29 11 74 42 113 79 57 54 119 93 185 117 11 4 40 16 65 28 25 11 80 23 123 27 42 4 77 11 77 15 0 13 -116 9 -185 -6z m1205 -1675 c12 -6 23 -30 30 -64 21 -102 -18 -281 -86 -391 -16 -26 -35 -59 -43 -74 -24 -44 -25 -4 0 47 28 60 48 165 48 264 1 59 5 81 19 94 16 17 17 16 22 -12 5 -24 7 -26 13 -11 9 25 9 49 -2 66 -8 12 -12 12 -24 2 -20 -16 -25 -5 -19 47 4 44 11 49 42 32z\\\"/> <path d=\\\"M1279 2976 c6 -7 25 -40 41 -73 52 -105 196 -259 332 -355 57 -41 235 -138 253 -138 15 0 -2 20 -52 58 -30 25 -74 75 -107 126 -31 47 -59 86 -61 86 -2 0 3 -21 11 -47 29 -90 28 -87 13 -78 -97 58 -239 194 -313 300 -54 78 -105 135 -119 135 -5 0 -4 -6 2 -14z\\\"/> <path d=\\\"M1720 2692 c0 -16 68 -102 114 -145 93 -85 227 -157 361 -193 78 -21 78 -21 70 39 -10 80 -32 150 -56 175 -11 13 -23 22 -25 20 -2 -3 5 -36 16 -74 22 -75 25 -110 11 -118 -12 -8 -117 28 -171 58 -25 14 -54 30 -65 35 -32 15 -85 57 -150 119 -83 79 -105 97 -105 84z\\\"/> <path d=\\\"M2273 2543 c84 -85 94 -99 107 -145 16 -57 30 -46 30 22 0 49 -3 62 -17 67 -10 3 -31 21 -48 38 -43 46 -99 85 -121 85 -13 0 0 -18 49 -67z\\\"/> <g><path d=\\\"M1314 1970 c-66 -14 -135 -51 -186 -100 -66 -64 -65 -90 2 -45 68 46 147 67 264 73 103 5 241 -16 298 -44 37 -19 38 -18 38 16 0 41 -24 76 -63 90 -40 15 -298 22 -353 10z\\\"/><animateTransform type=\\\"translate\\\" dur=\\\"13s\\\" values=\\\"0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 22.5;0 50;0 30;0 15;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 60;0 0;0 60;0 0\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g> <path d=\\\"M1372 1849 c-56 -9 -136 -46 -189 -86 -37 -27 -46 -53 -10 -31 29 19 70 16 93 -7 32 -31 86 -47 194 -56 58 -5 120 -11 138 -15 27 -5 32 -3 32 12 -1 39 -65 128 -105 149 -52 25 -23 33 42 11 58 -20 87 -21 53 -1 -14 8 -50 17 -80 20 -30 3 -68 7 -85 9 -16 2 -54 0 -83 -5z m26 -60 l-23 -30 23 -39 22 -39 -47 16 c-54 19 -113 51 -113 63 0 6 89 49 130 63 27 8 30 -4 8 -34z m42 -34 c10 -27 29 -32 47 -14 13 13 33 4 33 -16 0 -18 -41 -29 -73 -21 -26 6 -53 48 -43 65 12 18 26 13 36 -14z m120 -10 c0 -14 8 -29 20 -35 25 -14 28 -45 3 -35 -10 4 -28 10 -41 13 -17 3 -21 9 -16 21 3 9 9 26 11 39 7 30 23 28 23 -3z\\\"/> <path d=\\\"M384 1775 c-38 -58 -13 -250 49 -370 22 -43 77 -110 77 -93 0 3 -18 44 -40 90 -69 146 -92 343 -43 362 21 8 110 -86 157 -167 38 -66 63 -88 51 -44 -24 88 -84 179 -143 220 -49 35 -86 35 -108 2z\\\"/> <path d=\\\"M2095 1778 c-41 -11 -89 -38 -68 -38 7 0 27 6 45 14 18 8 49 19 68 24 47 13 6 13 -45 0z\\\"/> <path d=\\\"M2238 1771 c29 -10 64 -29 78 -42 24 -22 26 -23 23 -4 -5 25 -82 65 -124 65 -26 -1 -22 -3 23 -19z\\\"/> <path d=\\\"M2109 1747 c-52 -24 -117 -96 -105 -115 5 -9 226 -15 226 -6 0 3 -11 15 -24 27 -28 25 -37 58 -19 64 7 3 17 -7 23 -22 7 -18 15 -25 25 -21 8 3 22 9 30 12 20 8 19 -15 -2 -38 -9 -10 -12 -18 -6 -18 16 0 41 32 48 62 6 21 2 30 -19 43 -15 10 -46 20 -70 22 l-45 5 -7 -37 c-4 -21 -2 -47 5 -61 l11 -24 -75 0 c-41 0 -75 4 -75 9 0 13 92 91 108 91 6 0 12 5 12 10 0 12 -8 12 -41 -3z\\\"/> <path d=\\\"M1730 1744 c0 -3 7 -19 17 -34 16 -28 16 -29 -21 -80 -58 -80 -32 -76 29 4 24 32 34 76 16 76 -5 0 -11 9 -14 20 -5 18 -27 29 -27 14z\\\"/> <path d=\\\"M1954 1694 c-26 -33 -27 -38 -15 -72 23 -64 62 -142 72 -142 14 0 11 13 -21 83 -37 81 -37 97 -4 136 19 23 22 31 10 31 -8 0 -27 -16 -42 -36z\\\"/> <path d=\\\"M538 1483 c-42 -69 -18 -181 44 -202 39 -14 135 -14 143 -1 4 6 -8 35 -25 64 -18 33 -33 77 -38 113 -8 56 -8 57 -22 33 -7 -14 -14 -46 -14 -72 0 -38 6 -54 27 -76 15 -15 27 -32 27 -36 0 -18 -85 3 -102 24 -22 27 -24 114 -3 150 18 32 18 40 1 40 -8 0 -25 -17 -38 -37z\\\"/> <path d=\\\"M2080 1264 c0 -3 10 -22 22 -43 14 -25 19 -45 15 -63 -6 -22 -12 -26 -42 -25 -24 1 -49 -9 -80 -31 -25 -18 -58 -32 -72 -32 -26 0 -26 -1 -10 -17 17 -17 19 -17 45 -1 53 34 110 58 125 52 22 -8 57 35 57 69 0 32 -27 84 -47 91 -7 3 -13 3 -13 0z\\\"/> <path d=\\\"M1617 1253 c-4 -3 -7 -30 -7 -59 0 -46 4 -57 34 -88 18 -20 41 -36 50 -36 25 0 19 18 -12 34 -40 21 -56 56 -49 111 6 41 0 55 -16 38z\\\"/> <path d=\\\"M1710 1150 c-26 -16 -1 -25 88 -31 48 -3 95 -9 105 -13 34 -16 18 21 -17 38 -37 18 -151 22 -176 6z\\\"/> <path d=\\\"M1675 910 c-46 -13 -178 -34 -195 -31 -34 8 -45 5 -45 -9 0 -9 15 -17 44 -22 33 -6 56 -19 95 -56 88 -84 143 -102 306 -102 127 0 162 12 196 67 10 15 29 40 42 55 l25 28 -27 25 c-50 46 -84 58 -145 50 -75 -9 -113 -9 -196 -2 -38 3 -83 2 -100 -3z m210 -21 c17 -1 49 2 72 6 47 8 93 -5 130 -38 30 -27 19 -40 -26 -32 -20 3 -140 10 -268 14 -127 5 -240 14 -250 20 -15 8 -10 11 27 12 25 1 74 7 110 14 36 7 90 11 120 9 30 -3 69 -5 85 -5z m-41 -79 c120 -5 223 -13 228 -16 17 -11 -33 -53 -82 -69 -39 -13 -65 -14 -166 -5 -125 11 -162 24 -230 78 -43 34 -43 43 -1 32 17 -5 130 -14 251 -20z\\\"/></g><animateTransform type=\\\"scale\\\" dur=\\\"11s\\\" values=\\\"1 1;1 1;1 1;1 1;1 1;1.06 1.06;1.03 1.03;1.01 1.01;1 1;1 1;1 1;1 1;1 1;1 1;1 1;1 1\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/><animateTransform type=\\\"rotate\\\" dur=\\\"23s\\\" values=\\\"0;0;0;0;0;0;5;-5;-1.5;0;0;0;0;0;0;-360\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/></g></g>'\\n\\t];\\n}\\n\",\"keccak256\":\"0x0799a8cc86643a0e9b3891735ead1658fcab87a65a61ee2ba7442a4d0c735db0\",\"license\":\"MIT\"},\"contracts/MovingMondrian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport 'base64-sol/base64.sol';\\nimport './MondrianFrames.sol';\\nimport './MondrianShapes.sol';\\n\\n//    __  ___         _             __  ___             __    _             \\n//   /  |/  /__ _  __(_)__  ___ _  /  |/  /__  ___  ___/ /___(_)__ ____  ___\\n//  / /|_/ / _ \\\\ |/ / / _ \\\\/ _ `/ / /|_/ / _ \\\\/ _ \\\\/ _  / __/ / _ `/ _ \\\\(_-<\\n// /_/  /_/\\\\___/___/_/_//_/\\\\_, / /_/  /_/\\\\___/_//_/\\\\_,_/_/ /_/\\\\_,_/_//_/___/\\n//                        /___/  \\n//\\n// Fully onchain animated SVG NFT by David Ryan (drcoder.eth, Twitter @davidryan59)\\n// See: https://en.wikipedia.org/wiki/Piet_Mondrian\\n// \\\"Mondrian began producing grid-based paintings in late 1919, and in 1920, the style for which he came to be renowned began to appear\\\"\\n// I've taken the grid style, and added a 2020s crypto twist to it in terms of animation and generative art.\\n\\n\\ninterface IERC20 {\\n    function transfer(address _to, uint256 _amount) external returns (bool);\\n}\\n\\ncontract MovingMondrian is ERC721, Ownable {\\n\\n\\tusing Strings for uint256;\\n\\n\\t// -------------------------------------\\n\\t// CHECK all these before deploying\\n\\n\\t// Chain Config\\n\\t// string private constant network = \\\"Local\\\";\\n\\tstring private constant network = \\\"Goerli\\\";\\n\\t// string private constant network = \\\"Optimism\\\";\\n\\n\\t// Mint Config\\n    uint256 public constant mintCost = 100000 * 1000000000; // 100000 gwei, 0.00010 ETH\\n\\tuint256 public constant mintLimit = 25;\\n\\n\\t// -------------------------------------\\n\\n\\t// State Variables\\n\\tstring private externalUrl = \\\"https://WEB_APP_PENDING/token/\\\";\\n\\tuint256 public constant mintMaxBatchSize = 10;\\n    uint256 private nextTokenId = 1;\\n\\tmapping (uint256 => uint256) private generator1; // One generator had insufficient entropy for all the randomness required by global variables and 12 rectangles\\n\\tmapping (uint256 => uint256) private generator2; // so I put a 2nd generator in. Now it is really random! :)\\n\\n\\t// Beneficiary\\n\\taddress payable public beneficiary;\\n\\tbool public beneficiaryLocked = false;\\n\\n\\t// Royalties\\n\\tuint256 public royaltyBasisPoints = 500; // 5% creator royalties\\n\\t// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n\\tMondrianFrames mf;\\n\\tMondrianShapes ms;\\n    constructor(address initialOwner, address initialBeneficiary, address mfAddress, address msAddress) ERC721(\\\"Moving Mondrian\\\", \\\"MONDO\\\") Ownable() {\\n\\t\\t// // Royalties interface\\n        // ._registerInterface(_INTERFACE_ID_ERC2981); // Gave errors...\\n\\n\\t\\t// Data for drawing NFTs\\n\\t\\tmf = MondrianFrames(mfAddress);\\n\\t\\tms = MondrianShapes(msAddress);\\n\\n\\t\\t// Setup owner and beneficiary\\n\\t\\t_transferOwnership(initialOwner);\\n\\t\\tbeneficiary = payable(initialBeneficiary);\\n\\n\\t\\t// Optional initial mint, don't do this if beneficiary a Split\\n\\t\\t// _mintTo(initialOwner, mintMaxBatchSize);\\n\\t}\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount) {\\n\\t\\treceiver = beneficiary;\\n\\t\\troyaltyAmount = (_salePrice * royaltyBasisPoints) / 10000;\\n\\t}\\n\\n    function _mintTo(address recipient, uint256 numberToMint) private {\\n\\t\\trequire(0 < numberToMint && numberToMint <= mintMaxBatchSize, \\\"numberToMint must be between 1 and mintMaxBatchSize\\\");\\n\\t\\trequire(nextTokenId + numberToMint - 1 <= mintLimit, \\\"Cannot mint numberToMint because mintLimit would be hit\\\");\\n\\t\\tfor (uint256 index = 0; index < numberToMint; index++) {\\n\\t\\t\\tuint256 id = nextTokenId++;\\n\\t\\t\\tgenerator1[id] = uint256(keccak256(abi.encodePacked(blockhash(block.number-1), msg.sender, address(this), id, \\\"1\\\")));\\n\\t\\t\\tgenerator2[id] = uint256(keccak256(abi.encodePacked(blockhash(block.number-1), msg.sender, address(this), id, \\\"2\\\")));\\n\\t\\t\\t_safeMint(recipient, id);\\n\\t\\t}\\n    }\\n\\n\\tfunction mintBatch(uint256 batchSize) public payable {\\n\\t\\trequire(msg.value == batchSize * mintCost, \\\"Failed to send mintCost ETH per NFT\\\");\\n\\t\\t_mintTo(msg.sender, batchSize);\\n\\t}\\n\\n\\tfunction mintsCompleted() public view returns (uint256) {\\n\\t\\treturn nextTokenId - 1;\\n\\t}\\n\\n\\tfunction mintsRemaining() public view returns (uint256) {\\n\\t\\treturn mintLimit + 1 - nextTokenId;\\n\\t}\\n\\n\\t/**\\n\\t * Beneficiary handling - allow all ETH to be withdrawn from contract to beneficiary,\\n\\t * and the owner to update or lock the beneficiary\\n\\t */\\n\\tfunction withdraw() external {\\n\\t\\t(bool success, ) = payable(beneficiary).call{ value: address(this).balance }(\\\"\\\");\\n\\t\\trequire(success, \\\"Failed to send Ether to Beneficiary\\\");\\n\\t}\\n\\n\\tfunction updateBeneficiary(address newBeneficiary) external onlyOwner {\\n\\t\\trequire(!beneficiaryLocked, \\\"Beneficiary is locked and cannot be changed\\\");\\n\\t\\tbeneficiary = payable(newBeneficiary);\\n\\t}\\n\\n\\tfunction lockBeneficiary() external onlyOwner {\\n\\t\\trequire(!beneficiaryLocked, \\\"Beneficiary has already been locked\\\");\\n\\t\\tbeneficiaryLocked = true;\\n\\t}\\n\\n\\tfunction updateRoyaltyBasisPoints(uint256 newRoyaltyBasisPoints) external onlyOwner {\\n\\t\\trequire(!beneficiaryLocked, \\\"Beneficiary is locked, royalty info cannot be updated\\\");\\n\\t\\trequire(newRoyaltyBasisPoints <= 500, \\\"Basis points cannot be greater than 5%\\\");\\n\\t\\troyaltyBasisPoints = newRoyaltyBasisPoints;\\n\\t}\\n\\n\\tfunction updateExternalUrl(string memory newExternalUrl) external onlyOwner {\\n\\t\\t// Format is \\\"https://WEB_APP_PENDING/token/\\\"\\n\\t\\texternalUrl = newExternalUrl;\\n\\t}\\n\\n\\t// Function to allow ERC20 tokens to be withdrawn from this contract by owner\\n    function withdrawERC20(address _tokenContract, uint256 _amount) external onlyOwner {\\n        IERC20 tokenContract = IERC20(_tokenContract);\\n        tokenContract.transfer(msg.sender, _amount);\\n    }\\n\\n\\tfunction getNumericAttribute(string memory attribType, uint256 attribValue, string memory suffix) private pure returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t'{\\\"display_type\\\": \\\"number\\\", \\\"trait_type\\\": \\\"',\\n\\t\\t\\tattribType,\\n\\t\\t\\t'\\\", \\\"value\\\": ',\\n\\t\\t\\tuint2str(attribValue),\\n\\t\\t\\t'}',\\n\\t\\t\\tsuffix\\n\\t\\t));\\n\\t}\\n\\n\\tfunction getStringAttribute(string memory attribType, string memory attribValue, string memory suffix) private pure returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t'{\\\"trait_type\\\": \\\"',\\n\\t\\t\\tattribType,\\n\\t\\t\\t'\\\", \\\"value\\\": \\\"',\\n\\t\\t\\tattribValue,\\n\\t\\t\\t'\\\"}',\\n\\t\\t\\tsuffix\\n\\t\\t));\\n\\t}\\n\\n\\tfunction getAllAttributes(uint256 id) private view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t\\\"[\\\",\\n\\t\\t\\tgetNumericAttribute(\\\"Rarity\\\", getOverallRarityMillibit(id), \\\",\\\"),\\n\\t\\t\\tgetStringAttribute(\\\"Shape\\\", getShapeName(id), \\\",\\\"),\\n\\t\\t\\tgetStringAttribute(\\\"Frame\\\", getFrameName(id), \\\",\\\"),\\n\\t\\t\\tgetStringAttribute(\\\"Lines\\\", getStrokeWidthMultiplierName(id), \\\",\\\"),\\n\\t\\t\\tgetNumericAttribute(\\\"Base Angle\\\", getBaseAngle(id), \\\",\\\"),\\n\\t\\t\\tgetNumericAttribute(\\\"Duration\\\", getDurationMultiplier(id), \\\",\\\"),\\n\\t\\t\\tgetStringAttribute(\\\"Colours\\\", getColourPaletteName(id), \\\",\\\"),\\n\\t\\t\\tgetStringAttribute(\\\"Opacities\\\", getOpacityPaletteName(id), \\\"]\\\")\\n\\t\\t));\\n\\t}\\n\\n\\t// Rarity is measured in millibits, where 1000 millibits = 1 bit which means half as likely. Higher values are more rare. Base values for millibits are the most likely option which is reset to zero millibits (e.g. square frame)\\n\\tfunction getOverallRarityMillibit(uint256 id) private view returns (uint256) {\\n\\t\\treturn getShapeRarityMillibit(id) + getFrameRarityMillibit(id) + getBaseAngleRarityMillibit(id) + getColourPaletteRarityMillibit(id) + getStrokeWidthMultiplierRarityMillibit(id) + getDurationMultiplierRarityMillibit(id);\\n\\t}\\n\\n\\tfunction tokenURI(uint256 id) public view override returns (string memory) {\\n\\t\\trequire(_exists(id), \\\"Requested id doesn't exist\\\");\\n\\t\\tstring memory name = string(abi.encodePacked(network, \\\" Moving Mondrian #\\\", id.toString()));\\n\\t\\tstring memory description = string(abi.encodePacked(\\n\\t\\t\\t\\\"This Moving Mondrian NFT has id \\\",\\n\\t\\t\\tid.toString(),\\n\\t\\t\\t\\\" and is on \\\",\\n\\t\\t\\tnetwork,\\n\\t\\t\\t\\\" network\\\"\\n\\t\\t));\\n\\t\\tstring memory image = Base64.encode(bytes(generateSVGofTokenById(id)));\\n\\n\\t\\t// To avoid stack too deep...\\n\\t\\tstring memory firstPart = string(abi.encodePacked(\\n\\t\\t\\t\\t'{\\\"name\\\":\\\"',\\n\\t\\t\\t\\tname,\\n\\t\\t\\t\\t'\\\", \\\"description\\\":\\\"',\\n\\t\\t\\t\\tdescription,\\n\\t\\t\\t\\t'\\\", \\\"external_url\\\":\\\"',\\n\\t\\t\\t\\texternalUrl,\\n\\t\\t\\t\\tid.toString()\\n\\t\\t));\\n\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t\\\"data:application/json;base64,\\\",\\n\\t\\t\\tBase64.encode(bytes(abi.encodePacked(\\n\\t\\t\\t\\t// '{\\\"name\\\":\\\"',\\n\\t\\t\\t\\t// name,\\n\\t\\t\\t\\t// '\\\", \\\"description\\\":\\\"',\\n\\t\\t\\t\\t// description,\\n\\t\\t\\t\\t// '\\\", \\\"external_url\\\":\\\"',\\n\\t\\t\\t\\t// externalUrl,\\n\\t\\t\\t\\t// id.toString(),\\n\\t\\t\\t\\tfirstPart,\\n\\t\\t\\t\\t'\\\", \\\"attributes\\\": ',\\n\\t\\t\\t\\tgetAllAttributes(id),\\n\\t\\t\\t\\t', \\\"owner\\\":\\\"',\\n\\t\\t\\t\\ttoHexString(uint160(ownerOf(id)), 20),\\n\\t\\t\\t\\t'\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n\\t\\t\\t\\timage,\\n\\t\\t\\t\\t'\\\"}'\\n\\t\\t\\t)))\\n\\t\\t));\\n\\t}\\n\\n\\t// Defines an SVG image in viewport [0, 512] x [0, 512]\\n\\tfunction generateSVGofTokenById(uint256 id) public view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t'<svg version=\\\"1.1\\\" id=\\\"Layer_1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xml:space=\\\"preserve\\\" viewBox=\\\"0 0 512 512\\\">',\\n\\t\\t\\trenderTokenById(id),\\n\\t\\t\\t'</svg>'\\n\\t\\t));\\n\\t}\\n\\n\\tfunction renderTokenById(uint256 id) private view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t'<defs><mask id=\\\"frameOuter\\\"><g fill=\\\"white\\\"><g id=\\\"frameInner\\\" stroke-linejoin=\\\"round\\\">',\\n\\t\\t\\tgetFrame(id),\\n\\t\\t\\t'</g></g></mask><mask id=\\\"shapeOuter\\\"><rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"512\\\" height=\\\"512\\\" fill=\\\"white\\\"/><g fill=\\\"black\\\"><g id=\\\"shapeInner\\\" stroke-linejoin=\\\"round\\\">',\\n\\t\\t\\tgetShape(id),\\n\\t\\t\\t'</g></g></mask><g id=\\\"clockCirclesLarge\\\"><circle cx=\\\"256\\\" cy=\\\"48\\\" r=\\\"20\\\"/><circle cx=\\\"48\\\" cy=\\\"256\\\" r=\\\"20\\\"/><circle cx=\\\"256\\\" cy=\\\"464\\\" r=\\\"20\\\"/><circle cx=\\\"464\\\" cy=\\\"256\\\" r=\\\"20\\\"/></g><g id=\\\"clockCirclesSmall\\\"><circle cx=\\\"256\\\" cy=\\\"48\\\" r=\\\"12\\\"/><circle cx=\\\"48\\\" cy=\\\"256\\\" r=\\\"12\\\"/><circle cx=\\\"256\\\" cy=\\\"464\\\" r=\\\"12\\\"/><circle cx=\\\"464\\\" cy=\\\"256\\\" r=\\\"12\\\"/></g></defs>',\\n\\t\\t\\tgetDrawnItems(id)\\n\\t\\t));\\n\\t}\\n\\n\\tfunction getDrawnItems(uint256 id) private view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t'<g stroke-width=\\\"0\\\" stroke=\\\"black\\\" stroke-opacity=\\\"1\\\" mask=\\\"url(#frameOuter)\\\" ><rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"512\\\" height=\\\"512\\\" fill=\\\"white\\\"/>',\\n\\t\\t\\tgetTsfmedRectBlock(id, 0),  // Several rectangles at the back\\n\\t\\t\\t'<g mask=\\\"url(#shapeOuter)\\\">',\\n\\t\\t\\tgetTsfmedRectBlock(id, 6),  // Several more rectangles at the front, with shape punched through them\\n\\t\\t\\t'</g>',\\n\\t\\t\\tgetSuperimposedItems(id),\\n\\t\\t\\t'</g>'\\n\\t\\t));\\n\\t}\\n\\n\\tfunction getSuperimposedItems(uint256 id) private view returns (string memory) {\\n\\t\\tuint8 strokeWidthMultiplier = strokeWidthMultipliers[getStrokeWidthMultiplierIndex(id)];\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t'<g stroke-width=\\\"',\\n\\t\\t\\tuint2str(strokeWidthMultiplier),\\n\\t\\t\\t'\\\" fill=\\\"transparent\\\"><use href=\\\"#shapeInner\\\" stroke=\\\"white\\\" transform=\\\"scale(1.005)\\\" transform-origin=\\\"256 256\\\"/><use href=\\\"#shapeInner\\\" stroke=\\\"black\\\"/></g><g stroke-width=\\\"',\\n\\t\\t\\tuint2str(strokeWidthMultiplier * 2),\\n\\t\\t\\t'\\\" fill=\\\"transparent\\\" stroke-opacity=\\\"1\\\"><use href=\\\"#frameInner\\\" stroke=\\\"white\\\" transform=\\\"scale(0.999)\\\" transform-origin=\\\"256 256\\\"/><use href=\\\"#frameInner\\\" stroke=\\\"black\\\"/></g>'\\n\\t\\t));\\n\\t}\\n\\n\\t// ----------------------\\n\\t// Frame - choice of 32 frames (with some duplication), determines the outer perimeter of the NFT\\n\\n\\tfunction getFrameIndex(uint256 id) private view returns (uint256) {\\n\\t\\treturn getLowRand(generator2[id], 5, 196); // getLowRand uses 5 * 2 = 10 bits of randomness, it is min of 2 separate random variables\\n\\t}\\n\\n\\tfunction getFrame(uint256 id) private view returns (string memory) {\\n\\t\\treturn mf.getFrame(getFrameIndex(id));\\n\\t}\\n\\n\\tfunction getFrameName(uint256 id) private view returns (string memory) {\\n\\t\\treturn mf.getFrameName(getFrameIndex(id));\\n\\t}\\n\\n\\tfunction getFrameRarityMillibit(uint256 id) private view returns (uint256) {\\n\\t\\treturn mf.getFrameRarityMillibit(getFrameIndex(id));\\n\\t}\\n\\n\\t// ----------------------\\n\\t// Shape - choice of 32 shapes (with some duplication), determines the inner shape on an NFT\\n\\n\\tfunction getShapeIndex(uint256 id) private view returns (uint256) {\\n\\t\\treturn getLowRand(generator2[id], 5, 206);\\n\\t}\\n\\n\\tfunction getShape(uint256 id) private view returns (string memory) {\\n\\t\\treturn ms.getShape(getShapeIndex(id));\\n\\t}\\n\\n\\tfunction getShapeName(uint256 id) private view returns (string memory) {\\n\\t\\treturn ms.getShapeName(getShapeIndex(id));\\n\\t}\\n\\n\\tfunction getShapeRarityMillibit(uint256 id) private view returns (uint256) {\\n\\t\\treturn ms.getShapeRarityMillibit(getShapeIndex(id));\\n\\t}\\n\\n\\t// ----------------------\\n\\t// Base Angles - determines the geometry used for the image\\n\\n\\tuint16[8] private baseAngles = [\\n\\t\\t90,90,60,45,\\n\\t\\t72,30,36,180\\n\\t];\\n\\tuint256[8] private baseAngleRarityMillibit = [\\n\\t\\t0, 0, 1348, 1637,\\n\\t\\t2000, 2485, 3222, 4807\\n\\t];\\n\\n\\tfunction getBaseAngleIndex(uint256 id) private view returns (uint256) {\\n\\t\\treturn getLowRand(generator2[id], 3, 216);\\n\\t}\\n\\n\\tfunction getBaseAngle(uint256 id) private view returns (uint16) {\\n\\t\\treturn baseAngles[getBaseAngleIndex(id)];\\n\\t}\\n\\n\\tfunction getBaseAngleRarityMillibit(uint256 id) private view returns (uint256) {\\n\\t\\treturn baseAngleRarityMillibit[getBaseAngleIndex(id)];\\n\\t}\\n\\n\\t// ----------------------\\n\\t// Colour Palette selection - earlier palettes are more likely, each colour within palette is equally likely\\n\\n\\tstring[8] private colourPaletteNames = [\\n\\t\\t\\\"RYB\\\", \\\"CYM\\\", \\\"GYB\\\", \\\"ROY\\\",\\n\\t\\t\\\"CBM\\\", \\\"Rainbow\\\", \\\"Monochrome\\\", \\\"Monochrome\\\"\\n\\t];\\n\\tuint256[8] private colourPaletteRarityMillibit = [\\n\\t\\t0, 207, 448, 737,\\n\\t\\t1100, 1585, 1907, 1907\\n\\t];\\n\\tstring[16][8] private colourPalettes = [\\n\\t\\t// RYB\\n\\t\\t[\\\"red\\\", \\\"red\\\", \\\"red\\\", \\\"red\\\", \\\"red\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"blue\\\", \\\"blue\\\", \\\"blue\\\", \\\"blue\\\", \\\"blue\\\", \\\"white\\\"],\\n\\n\\t\\t// CYM\\n\\t\\t[\\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"cyan\\\", \\\"cyan\\\", \\\"cyan\\\", \\\"cyan\\\", \\\"cyan\\\", \\\"magenta\\\", \\\"magenta\\\", \\\"magenta\\\", \\\"magenta\\\", \\\"magenta\\\", \\\"white\\\"],\\n\\n\\t\\t// GYB\\n\\t\\t[\\\"green\\\", \\\"green\\\", \\\"green\\\", \\\"green\\\", \\\"green\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"blue\\\", \\\"blue\\\", \\\"blue\\\", \\\"blue\\\", \\\"blue\\\", \\\"white\\\"],\\n\\n\\t\\t// ROY\\n\\t\\t[\\\"red\\\", \\\"red\\\", \\\"red\\\", \\\"red\\\", \\\"red\\\", \\\"orange\\\", \\\"orange\\\", \\\"orange\\\", \\\"orange\\\", \\\"orange\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"white\\\"],\\n\\n\\n\\t\\t// CBM\\n\\t\\t[\\\"cyan\\\", \\\"cyan\\\", \\\"cyan\\\", \\\"cyan\\\", \\\"cyan\\\", \\\"blue\\\", \\\"blue\\\", \\\"blue\\\", \\\"blue\\\", \\\"blue\\\", \\\"magenta\\\", \\\"magenta\\\", \\\"magenta\\\", \\\"magenta\\\", \\\"magenta\\\", \\\"white\\\"],\\n\\n\\t\\t// Rainbow\\n\\t\\t[\\\"red\\\", \\\"red\\\", \\\"orange\\\", \\\"orange\\\", \\\"yellow\\\", \\\"yellow\\\", \\\"green\\\", \\\"green\\\", \\\"cyan\\\", \\\"cyan\\\", \\\"blue\\\", \\\"blue\\\", \\\"magenta\\\", \\\"magenta\\\", \\\"white\\\", \\\"white\\\"],\\n\\n\\t\\t// Monochrome\\n\\t\\t[\\\"rgb(32,32,32)\\\", \\\"rgb(32,32,32)\\\", \\\"rgb(32,32,32)\\\", \\\"rgb(32,32,32)\\\", \\\"rgb(32,32,32)\\\", \\\"grey\\\", \\\"grey\\\", \\\"grey\\\", \\\"grey\\\", \\\"grey\\\", \\\"rgb(224,224,224)\\\", \\\"rgb(224,224,224)\\\", \\\"rgb(224,224,224)\\\", \\\"rgb(224,224,224)\\\", \\\"rgb(224,224,224)\\\", \\\"white\\\"],\\n\\t\\t[\\\"rgb(32,32,32)\\\", \\\"rgb(32,32,32)\\\", \\\"rgb(32,32,32)\\\", \\\"rgb(32,32,32)\\\", \\\"rgb(32,32,32)\\\", \\\"grey\\\", \\\"grey\\\", \\\"grey\\\", \\\"grey\\\", \\\"grey\\\", \\\"rgb(224,224,224)\\\", \\\"rgb(224,224,224)\\\", \\\"rgb(224,224,224)\\\", \\\"rgb(224,224,224)\\\", \\\"rgb(224,224,224)\\\", \\\"white\\\"]\\n\\t];\\n\\n\\tfunction getColourPaletteName(uint256 id) private view returns (string memory) {\\n\\t\\treturn colourPaletteNames[getColourPaletteIndex(id)];\\n\\t}\\n\\n\\tfunction getColourPaletteIndex(uint256 id) private view returns (uint256) {\\n\\t\\treturn getLowRand(generator2[id], 3, 222);\\n\\t}\\n\\tfunction getColourPaletteRarityMillibit(uint256 id) private view returns (uint256) {\\n\\t\\treturn colourPaletteRarityMillibit[getColourPaletteIndex(id)];\\n\\t}\\n\\n\\tfunction getColourIndex(uint256 id, uint256 rectIndex) private view returns (uint256) {\\n\\t\\treturn getRectIndexRand(generator1[id], rectIndex, 4, 0);\\n\\t}\\n\\n\\t// ----------------------\\n\\t// Opacity Palette selection - all 16 palettes are equally likely, and each opacity within each palette is equally likely\\n\\n\\tstring[16] private opacityPaletteNames = [\\n\\t\\t\\\"Opaque\\\", \\\"All 15/16\\\", \\\"All 7/8\\\", \\\"All 3/4\\\",\\n\\t\\t\\\"All 2/3\\\", \\\"All 1/2\\\", \\\"All 1/3\\\", \\\"All 1/4\\\",\\n\\t\\t\\\"All 1/5\\\", \\\"All 3/20\\\", \\\"Opaque or 1/2\\\", \\\"Opaque, 2/3, 1/3\\\",\\n\\t\\t\\\"Opaque, 3/4, 1/2, 1/4\\\", \\\"2/3 or 1/3\\\", \\\"4/5, 3/5, 2/5, 1/5\\\", \\\"10% or 90%\\\"\\n\\t];\\n\\tstring[4][16] private opacityPalettes = [\\n\\t\\t[\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\"],\\n\\t\\t[\\\"0.9375\\\",\\\"0.9375\\\",\\\"0.9375\\\",\\\"0.9375\\\"],\\n\\t\\t[\\\"0.875\\\",\\\"0.875\\\",\\\"0.875\\\",\\\"0.875\\\"],\\n\\t\\t[\\\"0.75\\\",\\\"0.75\\\",\\\"0.75\\\",\\\"0.75\\\"],\\n\\n\\t\\t[\\\"0.667\\\",\\\"0.667\\\",\\\"0.667\\\",\\\"0.667\\\"],\\n\\t\\t[\\\"0.5\\\",\\\"0.5\\\",\\\"0.5\\\",\\\"0.5\\\"],\\n\\t\\t[\\\"0.333\\\",\\\"0.333\\\",\\\"0.333\\\",\\\"0.333\\\"],\\n\\t\\t[\\\"0.25\\\",\\\"0.25\\\",\\\"0.25\\\",\\\"0.25\\\"],\\n\\n\\t\\t[\\\"0.2\\\",\\\"0.2\\\",\\\"0.2\\\",\\\"0.2\\\"],\\n\\t\\t[\\\"0.15\\\",\\\"0.15\\\",\\\"0.15\\\",\\\"0.15\\\"],\\n\\t\\t[\\\"1\\\",\\\"1\\\",\\\"0.5\\\",\\\"0.5\\\"],\\n\\t\\t[\\\"1\\\",\\\"1\\\",\\\"0.667\\\",\\\"0.333\\\"],\\n\\n\\t\\t[\\\"1\\\",\\\"0.75\\\",\\\"0.5\\\",\\\"0.25\\\"],\\n\\t\\t[\\\"0.667\\\",\\\"0.667\\\",\\\"0.333\\\",\\\"0.333\\\"],\\n\\t\\t[\\\"0.8\\\",\\\"0.6\\\",\\\"0.4\\\",\\\"0.2\\\"],\\n\\t\\t[\\\"0.9\\\",\\\"0.9\\\",\\\"0.1\\\",\\\"0.1\\\"]\\n\\t];\\n\\n\\tfunction getOpacityPaletteIndex(uint256 id) private view returns (uint256) {\\n\\t\\treturn getRand(generator2[id], 4, 192);\\n\\t}\\n\\n\\tfunction getOpacityPaletteName(uint256 id) private view returns (string memory) {\\n\\t\\treturn opacityPaletteNames[getOpacityPaletteIndex(id)];\\n\\t}\\n\\n\\tfunction getOpacityIndex(uint256 id, uint256 rectIndex) private view returns (uint256) {\\n\\t\\treturn getRectIndexRand(generator1[id], rectIndex, 2, 4);\\n\\t}\\n\\n\\t// ----------------------\\n\\t// Stroke Width Multipliers - four width multipliers of different rarities\\n\\n\\tstring[4] private strokeWidthMultiplierNames = [\\\"Normal\\\", \\\"Thin\\\", \\\"Thick\\\", \\\"Thickest\\\"];\\n\\tuint8[4] private strokeWidthMultipliers = [2, 1, 3, 4];\\n\\tuint256[4] private strokeWidthMultiplierRarityMillibit = [0, 485, 1222, 2807];\\n\\n\\tfunction getStrokeWidthMultiplierIndex(uint256 id) private view returns (uint256) {\\n\\t\\treturn getLowRand(generator2[id], 2, 228);\\n\\t}\\n\\n\\tfunction getStrokeWidthMultiplierName(uint256 id) private view returns (string memory) {\\n\\t\\treturn strokeWidthMultiplierNames[getStrokeWidthMultiplierIndex(id)];\\n\\t}\\n\\n\\tfunction getStrokeWidthMultiplierRarityMillibit(uint256 id) private view returns (uint256) {\\n\\t\\treturn strokeWidthMultiplierRarityMillibit[getStrokeWidthMultiplierIndex(id)];\\n\\t}\\n\\n\\t// ----------------------\\n\\t// Rectangle Animation - Duration Multipliers - eight duration multipliers of different rarities\\n\\n\\tuint16[8] private durationMultipliers = [\\n\\t\\t5, 7, 11, 3,\\n\\t\\t23, 2, 37, 1\\n\\t];\\n\\tuint256[8] private durationMultiplierRarityMillibit = [\\n\\t\\t0, 207, 448, 737,\\n\\t\\t1100, 1585, 2322, 3907\\n\\t];\\n\\n\\tfunction getDurationMultiplierIndex(uint256 id) private view returns (uint256) {\\n\\t\\treturn getLowRand(generator2[id], 3, 232);\\n\\t}\\n\\n\\tfunction getDurationMultiplier(uint256 id) private view returns (uint16) {\\n\\t\\treturn durationMultipliers[getDurationMultiplierIndex(id)];\\n\\t}\\n\\n\\tfunction getDurationMultiplierRarityMillibit(uint256 id) private view returns (uint256) {\\n\\t\\treturn durationMultiplierRarityMillibit[getDurationMultiplierIndex(id)];\\n\\t}\\n\\n\\t// ----------------------\\n\\t// Rectangle Animation - other control values\\n\\n\\tuint8[4] private strokeWidths = [1,2,4,8];  // equally likely\\n\\tuint16[4] private rectHeights = [128, 192, 256, 384];  // equally likely\\n\\n\\t// For each rectangle, its duration and movement are independently chosen, both equally likely from 8 possibilities\\n\\tuint16[8] private durationSecondsList = [\\n\\t\\t13, 23, 29, 31,\\n\\t\\t41, 47, 59, 71\\n\\t];  // monstrous!\\n\\tstring[8] private yMovementValues = [\\n\\t\\t\\\"0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 32;0 256;0 256;0 256;0 256;0 256;0 256;0 256;0 192;0 0\\\",\\n\\t\\t\\\"0 0;0 0;0 -128;0 -128;0 -128;0 -128;0 128;0 128;0 128;0 128;0 128;0 128;0 128;0 0;0 0;0 0;0 0\\\",\\n\\t\\t\\\"0 128;0 128;0 128;0 128;0 128;0 128;0 96;0 0;0 0;0 0;0 0;0 0;0 0;0 64;0 128;0 128\\\",\\n\\t\\t\\\"0 64;0 256;0 192;0 192;0 192;0 192;0 128;0 0;0 0;0 0;0;0 0;0 0;0 64;0 64;0 64;0 64;0 64;0 64;0 64\\\",\\n\\n\\t\\t\\\"0 256;0 256;0 192;0 64;0 0;0 0;0 0;0 0;0 0;0 0;0 128;0 128;0 192;0 256;0 256;0 256;0 256;0 256\\\",\\n\\t\\t\\\"0 256;0 256;0 128;0 128;0 128;0 128;0 384;0 384;0 384;0 384;0 384;0 0;0 0;0 0;0 0;0 0;0 0;0 192;0 256;0 256;0 256\\\",\\n\\t\\t\\\"0 192;0 192;0 192;0 256;0 256;0 256;0 256;0 128;0 128;0 128;0 128;0 192;0 384;0 384;0 256;0 0;0 0;0 0;0 0;0 0;0 192\\\",\\n\\t\\t\\\"0 128;0 128;0 128;0 128;0 128;0 32;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 0;0 64;0 192;0 384;0 384;0 128\\\"\\n\\t];\\n\\n\\t// ----------------------\\n\\t// Main drawing functions here\\n\\n\\t// Single rectangle before animation\\n\\tfunction getRect(uint256 id, uint256 rectIndex) private view returns (string memory) {\\n\\t\\tuint256 gen1 = generator1[id];\\n\\t\\tuint8 strokeWidthMultiplier = strokeWidthMultipliers[getStrokeWidthMultiplierIndex(id)];\\n\\t\\tuint256 opacityPaletteIndex = getOpacityPaletteIndex(id);\\n\\t\\tuint256 opacityIndex = getOpacityIndex(id, rectIndex);\\n\\t\\tstring memory fillOpacity = opacityPalettes[opacityPaletteIndex][opacityIndex];\\n\\t\\tstring memory rectHeight = uint2str(rectHeights[getRectIndexRand(gen1, rectIndex, 2, 6)]);\\n\\t\\tstring memory strokeWidth = uint2str(strokeWidthMultiplier * strokeWidths[getRectIndexRand(gen1, rectIndex, 2, 8)]);\\n\\t\\tstring memory fillColour = colourPalettes[getColourPaletteIndex(id)][getColourIndex(id, rectIndex)];\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t'<rect x=\\\"-128\\\" width=\\\"768\\\" y=\\\"-64\\\" height=\\\"',\\n\\t\\t\\trectHeight,\\n\\t\\t\\t'\\\" stroke=\\\"black\\\" stroke-width=\\\"',\\n\\t\\t\\tstrokeWidth,\\n\\t\\t\\t'\\\" fill=\\\"',\\n\\t\\t\\tfillColour,\\n\\t\\t\\t'\\\" fill-opacity=\\\"',\\n\\t\\t\\tfillOpacity,\\n\\t\\t\\t'\\\"/>'\\n\\t\\t));\\t\\t\\n\\t}\\n\\n\\t// Animation for single rectangle\\n\\tfunction getRectAnimation(uint256 id, uint256 rectIndex) private view returns (string memory) {\\n\\t\\tuint256 gen1 = generator1[id];\\n\\t\\tuint16 durationMultiplier = getDurationMultiplier(id);\\n\\t\\tuint16 durationSeconds = durationSecondsList[getRectIndexRand(gen1, rectIndex, 3, 10)];\\n\\t\\tstring memory durationSecondsText = uint2str(durationMultiplier * durationSeconds);\\n\\t\\tstring memory yMovementValue = yMovementValues[getRectIndexRand(gen1, rectIndex, 3, 13)];\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t'<animateTransform dur=\\\"',\\n\\t\\t\\tdurationSecondsText,\\n\\t\\t\\t's\\\" values=\\\"',\\n\\t\\t\\tyMovementValue,\\n\\t\\t\\t'\\\" type=\\\"translate\\\" attributeName=\\\"transform\\\" attributeType=\\\"XML\\\" repeatCount=\\\"indefinite\\\" additive=\\\"sum\\\"/>'\\n\\t\\t));\\t\\t\\n\\t}\\n\\n\\t// Single animated rectangle\\n\\tfunction getTsfmedRect(uint256 id, uint256 rectIndex) private view returns (string memory) {\\n\\t\\tuint256 gen2 = generator2[id];\\n\\t\\tuint16 baseAngle = getBaseAngle(id);\\n\\t\\tuint16 rotationNumber = uint16(getRectIndexRand(gen2, rectIndex, 6, 0));\\n\\t\\tstring memory finalAngle = uint2str(baseAngle * rotationNumber);\\n\\t\\tstring memory xReflection = getRectIndexRand(gen2, rectIndex, 1, 6) == 0 ? \\\"1\\\" : \\\"-1\\\";\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\t'<g transform-origin=\\\"256 256\\\" transform=\\\"scale(',\\n\\t\\t\\txReflection,\\n\\t\\t\\t',1) rotate(',\\n\\t\\t\\tfinalAngle,\\n\\t\\t\\t')\\\">',\\n\\t\\t\\tgetRect(id, rectIndex),\\n\\t\\t\\tgetRectAnimation(id, rectIndex),\\n\\t\\t\\t'</g>'\\n\\t\\t));\\t\\t\\n\\t}\\n\\n\\t// Block of several animated rectangles\\n\\tfunction getTsfmedRectBlock(uint256 id, uint256 index) private view returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(\\n\\t\\t\\tgetTsfmedRect(id, index),\\n\\t\\t\\tgetTsfmedRect(id, index + 1),\\n\\t\\t\\tgetTsfmedRect(id, index + 2),\\n\\t\\t\\tgetTsfmedRect(id, index + 3),\\n\\t\\t\\tgetTsfmedRect(id, index + 4),\\n\\t\\t\\tgetTsfmedRect(id, index + 5)\\n\\t\\t));\\t\\t\\n\\t}\\n\\n\\t// ----------------------\\n\\t// Helper functions\\n\\n\\t// Get random value between 0 and 2 ** bits - 1, with linear skew to low values\\n\\t// Randomness consumed: bits * 2\\n\\tfunction getLowRand(uint256 gen, uint8 bits, uint8 startBit) private pure returns (uint8) {\\n\\t\\treturn uint8(Math.min(getRand(gen, bits, startBit), getRand(gen, bits, startBit + bits)));\\n\\t}\\n\\n\\t// Get random value between 0 and 2 ** bits - 1, with uniform distribution\\n\\t// Randomness consumed: bits\\n\\tfunction getRand(uint256 gen, uint8 bits, uint8 startBit) private pure returns (uint8) {\\n\\t\\tuint8 gen8bits = uint8(gen >> startBit);\\n\\t\\tif (bits >= 8) return gen8bits;\\n\\t\\treturn uint8(gen8bits % 2 ** bits);\\n\\t}\\n\\n\\t// Get random value between 0 and 2 ** bits - 1, with uniform distribution\\n\\t// There are 12 rectangles, so index = 0 ... 11\\n\\t// Each rectangle consumes 23 bits of entropy, which is split into\\n\\t// 16 bits on generator1, and 7 bits on generator2\\n\\tfunction getRectIndexRand(uint256 gen, uint256 rectIndex, uint8 bits, uint8 startBit) private pure returns (uint8) {\\n\\t\\treturn getRand(gen, bits, uint8(16 * rectIndex + startBit));\\n\\t}\\n\\n\\t// Helper to turn numbers into text\\n\\tfunction uint2str(uint _i) private pure returns (string memory _uintAsString) {\\n\\t\\tif (_i == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint j = _i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len;\\n\\t\\twhile (_i != 0) {\\n\\t\\t\\tk = k-1;\\n\\t\\t\\tuint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n\\t\\t\\tbytes1 b1 = bytes1(temp);\\n\\t\\t\\tbstr[k] = b1;\\n\\t\\t\\t_i /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\t// Helper function to turn address (uint256) into string representation\\n\\tbytes16 private constant ALPHABET = '0123456789abcdef';\\n\\tfunction toHexString(uint256 value, uint256 length) private pure returns (string memory) {\\n\\t\\tbytes memory buffer = new bytes(2 * length + 2);\\n\\t\\tbuffer[0] = '0';\\n\\t\\tbuffer[1] = 'x';\\n\\t\\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\\n\\t\\t\\tbuffer[i] = ALPHABET[value & 0xf];\\n\\t\\t\\tvalue >>= 4;\\n\\t\\t}\\n\\t\\treturn string(buffer);\\n\\t}\\n}\\n\",\"keccak256\":\"0x548c01e86650499391f4a531a80b66ca66ed4d40c2da003bee317425fdcb5fdf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c806370a082311161010d578063a1db9782116100a0578063c6cdc8341161006f578063c6cdc83414610566578063c87b56dd14610586578063dfc8f4e0146105a6578063e985e9c5146105bb578063f2fde38b146105db57600080fd5b8063a1db9782146104ec578063a22cb4651461050c578063b88d4fde1461052c578063bdb4b8481461054c57600080fd5b80638c9d44ed116100dc5780638c9d44ed1461048f5780638da5cb5b146104a457806395d89b41146104c2578063996517cf146104d757600080fd5b806370a082311461041a578063715018a61461043a578063719b7c1d1461044f5780637931b3e41461046f57600080fd5b80632a55205a1161018557806342842e0e1161015457806342842e0e146103b057806344c66be7146103d05780636352211e146103e557806365c85fd51461040557600080fd5b80632a55205a1461031857806338af3eed146103575780633ccfd60b1461037757806342260b5d1461038c57600080fd5b80630aaffd2a116101c15780630aaffd2a146102a457806320e409b4146102c45780632350151e146102d757806323b872dd146102f857600080fd5b806301ffc9a7146101f357806306fdde0314610228578063081812fc1461024a578063095ea7b314610282575b600080fd5b3480156101ff57600080fd5b5061021361020e366004612d59565b6105fb565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b5061023d61064d565b60405161021f9190612dc6565b34801561025657600080fd5b5061026a610265366004612dd9565b6106df565b6040516001600160a01b03909116815260200161021f565b34801561028e57600080fd5b506102a261029d366004612e0e565b610706565b005b3480156102b057600080fd5b506102a26102bf366004612e38565b610820565b6102a26102d2366004612dd9565b6108b8565b3480156102e357600080fd5b50600b5461021390600160a01b900460ff1681565b34801561030457600080fd5b506102a2610313366004612e53565b61092f565b34801561032457600080fd5b50610338610333366004612e8f565b610960565b604080516001600160a01b03909316835260208301919091520161021f565b34801561036357600080fd5b50600b5461026a906001600160a01b031681565b34801561038357600080fd5b506102a2610996565b34801561039857600080fd5b506103a2600c5481565b60405190815260200161021f565b3480156103bc57600080fd5b506102a26103cb366004612e53565b610a45565b3480156103dc57600080fd5b506103a2610a60565b3480156103f157600080fd5b5061026a610400366004612dd9565b610a81565b34801561041157600080fd5b506102a2610ae1565b34801561042657600080fd5b506103a2610435366004612e38565b610b64565b34801561044657600080fd5b506102a2610bea565b34801561045b57600080fd5b5061023d61046a366004612dd9565b610bfe565b34801561047b57600080fd5b506102a261048a366004612f5e565b610c2f565b34801561049b57600080fd5b506103a2610c47565b3480156104b057600080fd5b506006546001600160a01b031661026a565b3480156104ce57600080fd5b5061023d610c58565b3480156104e357600080fd5b506103a2601981565b3480156104f857600080fd5b506102a2610507366004612e0e565b610c67565b34801561051857600080fd5b506102a2610527366004612fb5565b610ce8565b34801561053857600080fd5b506102a2610547366004612fec565b610cf3565b34801561055857600080fd5b506103a2655af3107a400081565b34801561057257600080fd5b506102a2610581366004612dd9565b610d25565b34801561059257600080fd5b5061023d6105a1366004612dd9565b610e0b565b3480156105b257600080fd5b506103a2600a81565b3480156105c757600080fd5b506102136105d6366004613068565b610fcd565b3480156105e757600080fd5b506102a26105f6366004612e38565b610ffb565b60006001600160e01b031982166380ac58cd60e01b148061062c57506001600160e01b03198216635b5e139f60e01b145b8061064757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461065c90613092565b80601f016020809104026020016040519081016040528092919081815260200182805461068890613092565b80156106d55780601f106106aa576101008083540402835291602001916106d5565b820191906000526020600020905b8154815290600101906020018083116106b857829003601f168201915b5050505050905090565b60006106ea82611071565b506000908152600460205260409020546001600160a01b031690565b600061071182610a81565b9050806001600160a01b0316836001600160a01b0316036107835760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061079f575061079f8133610fcd565b6108115760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161077a565b61081b83836110d0565b505050565b61082861113e565b600b54600160a01b900460ff16156108965760405162461bcd60e51b815260206004820152602b60248201527f42656e6566696369617279206973206c6f636b656420616e642063616e6e6f7460448201526a0818994818da185b99d95960aa1b606482015260840161077a565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6108c8655af3107a4000826130e2565b34146109225760405162461bcd60e51b815260206004820152602360248201527f4661696c656420746f2073656e64206d696e74436f737420455448207065722060448201526213919560ea1b606482015260840161077a565b61092c3382611198565b50565b61093933826113cc565b6109555760405162461bcd60e51b815260040161077a906130f9565b61081b83838361142b565b600b54600c546001600160a01b03909116906000906127109061098390856130e2565b61098d919061315c565b90509250929050565b600b546040516000916001600160a01b03169047908381818185875af1925050503d80600081146109e3576040519150601f19603f3d011682016040523d82523d6000602084013e6109e8565b606091505b505090508061092c5760405162461bcd60e51b815260206004820152602360248201527f4661696c656420746f2073656e6420457468657220746f2042656e656669636960448201526261727960e81b606482015260840161077a565b61081b83838360405180602001604052806000815250610cf3565b600854600090610a7260196001613170565b610a7c9190613183565b905090565b6000818152600260205260408120546001600160a01b0316806106475760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161077a565b610ae961113e565b600b54600160a01b900460ff1615610b4f5760405162461bcd60e51b815260206004820152602360248201527f42656e65666963696172792068617320616c7265616479206265656e206c6f636044820152621ad95960ea1b606482015260840161077a565b600b805460ff60a01b1916600160a01b179055565b60006001600160a01b038216610bce5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161077a565b506001600160a01b031660009081526003602052604090205490565b610bf261113e565b610bfc600061159c565b565b6060610c09826115ee565b604051602001610c1991906131b2565b6040516020818303038152906040529050919050565b610c3761113e565b6007610c4382826132ed565b5050565b60006001600854610a7c9190613183565b60606001805461065c90613092565b610c6f61113e565b60405163a9059cbb60e01b81523360048201526024810182905282906001600160a01b0382169063a9059cbb906044016020604051808303816000875af1158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce291906133ad565b50505050565b610c4333838361161d565b610cfd33836113cc565b610d195760405162461bcd60e51b815260040161077a906130f9565b610ce2848484846116eb565b610d2d61113e565b600b54600160a01b900460ff1615610da55760405162461bcd60e51b815260206004820152603560248201527f42656e6566696369617279206973206c6f636b65642c20726f79616c747920696044820152741b999bc818d85b9b9bdd081899481d5c19185d1959605a1b606482015260840161077a565b6101f4811115610e065760405162461bcd60e51b815260206004820152602660248201527f426173697320706f696e74732063616e6e6f742062652067726561746572207460448201526568616e20352560d01b606482015260840161077a565b600c55565b6000818152600260205260409020546060906001600160a01b0316610e725760405162461bcd60e51b815260206004820152601a60248201527f52657175657374656420696420646f65736e2774206578697374000000000000604482015260640161077a565b600060405180604001604052806006815260200165476f65726c6960d01b815250610e9c8461171e565b604051602001610ead9291906133ca565b60405160208183030381529060405290506000610ec98461171e565b60405180604001604052806006815260200165476f65726c6960d01b815250604051602001610ef9929190613417565b60405160208183030381529060405290506000610f1d610f1886610bfe565b6117b1565b9050600083836007610f2e8961171e565b604051602001610f41949392919061349c565b6040516020818303038152906040529050610fa381610f5f88611916565b610f7b610f6b8a610a81565b6001600160a01b03166014611b0e565b85604051602001610f8f94939291906135a2565b6040516020818303038152906040526117b1565b604051602001610fb39190613679565b604051602081830303815290604052945050505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61100361113e565b6001600160a01b0381166110685760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161077a565b61092c8161159c565b6000818152600260205260409020546001600160a01b031661092c5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161077a565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061110582610a81565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b03163314610bfc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161077a565b8060001080156111a95750600a8111155b6112115760405162461bcd60e51b815260206004820152603360248201527f6e756d626572546f4d696e74206d757374206265206265747765656e203120616044820152726e64206d696e744d6178426174636853697a6560681b606482015260840161077a565b60196001826008546112239190613170565b61122d9190613183565b11156112a15760405162461bcd60e51b815260206004820152603760248201527f43616e6e6f74206d696e74206e756d626572546f4d696e74206265636175736560448201527f206d696e744c696d697420776f756c6420626520686974000000000000000000606482015260840161077a565b60005b8181101561081b5760088054600091826112bd836136be565b9091555090506112ce600143613183565b60408051914060208301526bffffffffffffffffffffffff1933606090811b8216928401929092523090911b16605482015260688101829052603160f81b608882015260890160408051601f19818403018152918152815160209283012060008481526009909352912055611344600143613183565b60408051914060208301526bffffffffffffffffffffffff1933606090811b8216928401929092523090911b16605482015260688101829052601960f91b608882015260890160408051601f1981840301815291815281516020928301206000848152600a9093529120556113b98482611c63565b50806113c4816136be565b9150506112a4565b6000806113d883610a81565b9050806001600160a01b0316846001600160a01b031614806113ff57506113ff8185610fcd565b806114235750836001600160a01b0316611418846106df565b6001600160a01b0316145b949350505050565b826001600160a01b031661143e82610a81565b6001600160a01b0316146114645760405162461bcd60e51b815260040161077a906136d7565b6001600160a01b0382166114c65760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161077a565b6114d38383836001611c7d565b826001600160a01b03166114e682610a81565b6001600160a01b03161461150c5760405162461bcd60e51b815260040161077a906136d7565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606115f982611d05565b61160283611d85565b61160b84611da2565b604051602001610c199392919061371c565b816001600160a01b0316836001600160a01b03160361167e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161077a565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6116f684848461142b565b61170284848484611dd5565b610ce25760405162461bcd60e51b815260040161077a90613a3e565b6060600061172b83611ed6565b600101905060008167ffffffffffffffff81111561174b5761174b612eb1565b6040519080825280601f01601f191660200182016040528015611775576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461177f57509392505050565b606081516000036117d057505060408051602081019091526000815290565b600060405180606001604052806040815260200161457160409139905060006003845160026117ff9190613170565b611809919061315c565b6118149060046130e2565b90506000611823826020613170565b67ffffffffffffffff81111561183b5761183b612eb1565b6040519080825280601f01601f191660200182016040528015611865576020820181803683370190505b509050818152600183018586518101602084015b818310156118d1576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101611879565b6003895106600181146118eb57600281146118fc57611908565b613d3d60f01b600119830152611908565b603d60f81b6000198301525b509398975050505050505050565b60606119626040518060400160405280600681526020016552617269747960d01b81525061194384611fae565b604051806040016040528060018152602001600b60fa1b815250612018565b6119ab60405180604001604052806005815260200164536861706560d81b81525061198c85612050565b604051806040016040528060018152602001600b60fa1b81525061206d565b6119d5604051806040016040528060058152602001644672616d6560d81b81525061198c86612084565b6119ff604051806040016040528060058152602001644c696e657360d81b81525061198c876120a1565b611a516040518060400160405280600a8152602001694261736520416e676c6560b01b815250611a2e8861214f565b61ffff16604051806040016040528060018152602001600b60fa1b815250612018565b611a7e60405180604001604052806008815260200167223ab930ba34b7b760c11b815250611a2e8961218d565b611aaa60405180604001604052806007815260200166436f6c6f75727360c81b81525061198c8a61219b565b611af7604051806040016040528060098152602001684f706163697469657360b81b815250611ad88b6121b8565b604051806040016040528060018152602001605d60f81b81525061206d565b604051602001610c19989796959493929190613a90565b60606000611b1d8360026130e2565b611b28906002613170565b67ffffffffffffffff811115611b4057611b40612eb1565b6040519080825280601f01601f191660200182016040528015611b6a576020820181803683370190505b509050600360fc1b81600081518110611b8557611b85613b51565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611bb457611bb4613b51565b60200101906001600160f81b031916908160001a9053506000611bd88460026130e2565b611be3906001613170565b90505b6001811115611c5b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611c1757611c17613b51565b1a60f81b828281518110611c2d57611c2d613b51565b60200101906001600160f81b031916908160001a90535060049490941c93611c5481613b67565b9050611be6565b509392505050565b610c438282604051806020016040528060008152506121d5565b6001811115610ce2576001600160a01b03841615611cc3576001600160a01b03841660009081526003602052604081208054839290611cbd908490613183565b90915550505b6001600160a01b03831615610ce2576001600160a01b03831660009081526003602052604081208054839290611cfa908490613170565b909155505050505050565b600d546060906001600160a01b031663773d51eb611d2284612208565b6040518263ffffffff1660e01b8152600401611d4091815260200190565b600060405180830381865afa158015611d5d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106479190810190613b7e565b600e546060906001600160a01b03166322ced721611d228461222d565b6060611daf826000612249565b611dba836006612249565b611dc3846122d1565b604051602001610c1993929190613bec565b60006001600160a01b0384163b15611ecb57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611e19903390899088908890600401613d1f565b6020604051808303816000875af1925050508015611e54575060408051601f3d908101601f19168201909252611e5191810190613d52565b60015b611eb1573d808015611e82576040519150601f19603f3d011682016040523d82523d6000602084013e611e87565b606091505b508051600003611ea95760405162461bcd60e51b815260040161077a90613a3e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611423565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611f155772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611f41576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611f5f57662386f26fc10000830492506010015b6305f5e1008310611f77576305f5e100830492506008015b6127108310611f8b57612710830492506004015b60648310611f9d576064830492506002015b600a83106106475760010192915050565b6000611fb98261234f565b611fc283612375565b611fcb84612392565b611fd48561239f565b611fdd866123ac565b611fe687612428565b611ff09190613170565b611ffa9190613170565b6120049190613170565b61200e9190613170565b6106479190613170565b60608361202484612445565b8360405160200161203793929190613d6f565b60405160208183030381529060405290505b9392505050565b600e546060906001600160a01b031663b5f4d839611d228461222d565b606083838360405160200161203793929190613e15565b600d546060906001600160a01b0316634f6d9d86611d2284612208565b606060f86120ae83612571565b600481106120be576120be613b51565b0180546120ca90613092565b80601f01602080910402602001604051908101604052809291908181526020018280546120f690613092565b80156121435780601f1061211857610100808354040283529160200191612143565b820191906000526020600020905b81548152906001019060200180831161212657829003601f168201915b50505050509050919050565b6000600f61215c8361258d565b6008811061216c5761216c613b51565b601091828204019190066002029054906101000a900461ffff169050919050565b600061010161215c836125a9565b606060186121a8836125c5565b600881106120be576120be613b51565b606060a86121c5836125e1565b601081106120be576120be613b51565b6121df83836125fd565b6121ec6000848484611dd5565b61081b5760405162461bcd60e51b815260040161077a90613a3e565b6000818152600a602052604081205461222490600560c4612796565b60ff1692915050565b6000818152600a602052604081205461222490600560ce612796565b606061225583836127c5565b61226984612264856001613170565b6127c5565b61227885612264866002613170565b61228786612264876003613170565b61229687612264886004613170565b6122a588612264896005613170565b6040516020016122ba96959493929190613e9e565b604051602081830303815290604052905092915050565b6060600060fc6122e084612571565b600481106122f0576122f0613b51565b602081049091015460ff601f9092166101000a900416905061231181612445565b61232761231f836002613f1d565b60ff16612445565b604051602001612338929190613f40565b604051602081830303815290604052915050919050565b600061010261235d836125a9565b6008811061236d5761236d613b51565b015492915050565b600060fd61238283612571565b6004811061236d5761236d613b51565b6000602061235d836125c5565b6000601061235d8361258d565b600d546000906001600160a01b03166371d44c1c6123c984612208565b6040518263ffffffff1660e01b81526004016123e791815260200190565b602060405180830381865afa158015612404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190614144565b600e546000906001600160a01b031663442babdf6123c98461222d565b60608160000361246c5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156124965780612480816136be565b915061248f9050600a8361315c565b9150612470565b60008167ffffffffffffffff8111156124b1576124b1612eb1565b6040519080825280601f01601f1916602001820160405280156124db576020820181803683370190505b509050815b8515612568576124f1600182613183565b90506000612500600a8861315c565b61250b90600a6130e2565b6125159088613183565b61252090603061415d565b905060008160f81b90508084848151811061253d5761253d613b51565b60200101906001600160f81b031916908160001a90535061255f600a8961315c565b975050506124e0565b50949350505050565b6000818152600a602052604081205461222490600260e4612796565b6000818152600a602052604081205461222490600360d8612796565b6000818152600a602052604081205461222490600360e8612796565b6000818152600a602052604081205461222490600360de612796565b6000818152600a602052604081205461222490600460c06128ab565b6001600160a01b0382166126535760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161077a565b6000818152600260205260409020546001600160a01b0316156126b85760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161077a565b6126c6600083836001611c7d565b6000818152600260205260409020546001600160a01b03161561272b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161077a565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006114236127a68585856128ab565b60ff166127bd86866127b8818861415d565b6128ab565b60ff166128e8565b6000828152600a60205260408120546060916127e08561214f565b905060006127f28386600660006128fe565b60ff169050600061280f6128068385614176565b61ffff16612445565b905060006128218588600160066128fe565b60ff161561284957604051806040016040528060028152602001612d3160f01b815250612864565b604051806040016040528060018152602001603160f81b8152505b905080826128728a8a61291e565b61287c8b8b612bc9565b60405160200161288f949392919061419c565b6040516020818303038152906040529550505050505092915050565b600060ff80831685901c906008908516106128c7579050612049565b6128d2846002614354565b6128df9060ff8316614363565b95945050505050565b60008183106128f75781612049565b5090919050565b60006128df858460ff85166129148860106130e2565b6127b89190613170565b60008281526009602052604081205460609160fc61293b86612571565b6004811061294b5761294b613b51565b602081049091015460ff601f9092166101000a9004169050600061296e866125e1565b9050600061297c8787612d00565b9050600060b8836010811061299357612993613b51565b6004020182600481106129a8576129a8613b51565b0180546129b490613092565b80601f01602080910402602001604051908101604052809291908181526020018280546129e090613092565b8015612a2d5780601f10612a0257610100808354040283529160200191612a2d565b820191906000526020600020905b815481529060010190602001808311612a1057829003601f168201915b505050505090506000612a8061010b612a4a888b600260066128fe565b60ff1660048110612a5d57612a5d613b51565b601091828204019190066002029054906101000a900461ffff1661ffff16612445565b90506000612aca61010a612a98898c600260086128fe565b60ff1660048110612aab57612aab613b51565b60208104919091015461231f91601f166101000a900460ff1688613f1d565b905060006028612ad98c6125c5565b60088110612ae957612ae9613b51565b60100201612af78c8c612d27565b60108110612b0757612b07613b51565b018054612b1390613092565b80601f0160208091040260200160405190810160405280929190818152602001828054612b3f90613092565b8015612b8c5780601f10612b6157610100808354040283529160200191612b8c565b820191906000526020600020905b815481529060010190602001808311612b6f57829003601f168201915b5050505050905082828286604051602001612baa9493929190614377565b6040516020818303038152906040529850505050505050505092915050565b600082815260096020526040812054606091612be48561218d565b9050600061010c612bf984876003600a6128fe565b60ff1660088110612c0c57612c0c613b51565b601091828204019190066002029054906101000a900461ffff1690506000612c3982846128069190614176565b9050600061010d612c4e86896003600d6128fe565b60ff1660088110612c6157612c61613b51565b018054612c6d90613092565b80601f0160208091040260200160405190810160405280929190818152602001828054612c9990613092565b8015612ce65780601f10612cbb57610100808354040283529160200191612ce6565b820191906000526020600020905b815481529060010190602001808311612cc957829003601f168201915b50505050509050818160405160200161288f929190614478565b600082815260096020526040812054612d1d9083600260046128fe565b60ff169392505050565b600082815260096020526040812054612d1d90836004846128fe565b6001600160e01b03198116811461092c57600080fd5b600060208284031215612d6b57600080fd5b813561204981612d43565b60005b83811015612d91578181015183820152602001612d79565b50506000910152565b60008151808452612db2816020860160208601612d76565b601f01601f19169290920160200192915050565b6020815260006120496020830184612d9a565b600060208284031215612deb57600080fd5b5035919050565b80356001600160a01b0381168114612e0957600080fd5b919050565b60008060408385031215612e2157600080fd5b612e2a83612df2565b946020939093013593505050565b600060208284031215612e4a57600080fd5b61204982612df2565b600080600060608486031215612e6857600080fd5b612e7184612df2565b9250612e7f60208501612df2565b9150604084013590509250925092565b60008060408385031215612ea257600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ef057612ef0612eb1565b604052919050565b600067ffffffffffffffff821115612f1257612f12612eb1565b50601f01601f191660200190565b6000612f33612f2e84612ef8565b612ec7565b9050828152838383011115612f4757600080fd5b828260208301376000602084830101529392505050565b600060208284031215612f7057600080fd5b813567ffffffffffffffff811115612f8757600080fd5b8201601f81018413612f9857600080fd5b61142384823560208401612f20565b801515811461092c57600080fd5b60008060408385031215612fc857600080fd5b612fd183612df2565b91506020830135612fe181612fa7565b809150509250929050565b6000806000806080858703121561300257600080fd5b61300b85612df2565b935061301960208601612df2565b925060408501359150606085013567ffffffffffffffff81111561303c57600080fd5b8501601f8101871361304d57600080fd5b61305c87823560208401612f20565b91505092959194509250565b6000806040838503121561307b57600080fd5b61308483612df2565b915061098d60208401612df2565b600181811c908216806130a657607f821691505b6020821081036130c657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610647576106476130cc565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261316b5761316b613146565b500490565b80820180821115610647576106476130cc565b81810381811115610647576106476130cc565b600081516131a8818560208601612d76565b9290920192915050565b7f3c7376672076657273696f6e3d22312e31222069643d224c617965725f31222081527f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737660208201527f672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e77332e6f7260408201527f672f313939392f786c696e6b2220786d6c3a73706163653d227072657365727660608201527f65222076696577426f783d223020302035313220353132223e00000000000000608082015260008251613282816099850160208701612d76565b651e17b9bb339f60d11b6099939091019283015250609f01919050565b601f82111561081b57600081815260208120601f850160051c810160208610156132c65750805b601f850160051c820191505b818110156132e5578281556001016132d2565b505050505050565b815167ffffffffffffffff81111561330757613307612eb1565b61331b816133158454613092565b8461329f565b602080601f83116001811461335057600084156133385750858301515b600019600386901b1c1916600185901b1785556132e5565b600085815260208120601f198616915b8281101561337f57888601518255948401946001909101908401613360565b508582101561339d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156133bf57600080fd5b815161204981612fa7565b600083516133dc818460208801612d76565b71204d6f76696e67204d6f6e647269616e202360701b908301908152835161340b816012840160208801612d76565b01601201949350505050565b7f54686973204d6f76696e67204d6f6e647269616e204e4654206861732069642081526000835161344f816020850160208801612d76565b80830190506a01030b7321034b99037b7160ad1b6020820152835161347b81602b840160208801612d76565b67206e6574776f726b60c01b602b9290910191820152603301949350505050565b683d913730b6b2911d1160b91b8152845160009060206134c28260098601838b01612d76565b71111610113232b9b1b934b83a34b7b7111d1160711b60099285019283015286516134f381601b8501848b01612d76565b721116101132bc3a32b93730b62fbab936111d1160691b601b93909101928301528554602e9060009061352581613092565b6001828116801561353d576001811461355657613586565b60ff198416888701528215158302880186019450613586565b8b6000528660002060005b8481101561357c5781548a8201890152908301908801613561565b5050858389010194505b505050506135948188613196565b9a9950505050505050505050565b600085516135b4818460208a01612d76565b7001116101130ba3a3934b13aba32b9911d1607d1b90830190815285516135e2816011840160208a01612d76565b6a16101137bbb732b9111d1160a91b60119290910191820152845161360e81601c840160208901612d76565b7f222c2022696d616765223a2022646174613a696d6167652f7376672b786d6c3b601c92909101918201526618985cd94d8d0b60ca1b603c820152835161365c816043840160208801612d76565b61227d60f01b604392909101918201526045019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516136b181601d850160208701612d76565b91909101601d0192915050565b6000600182016136d0576136d06130cc565b5060010190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b7f3c646566733e3c6d61736b2069643d226672616d654f75746572223e3c67206681527f696c6c3d227768697465223e3c672069643d226672616d65496e6e657222207360208201527f74726f6b652d6c696e656a6f696e3d22726f756e64223e0000000000000000006040820152600084516137a0816057850160208901612d76565b7f3c2f673e3c2f673e3c2f6d61736b3e3c6d61736b2069643d2273686170654f756057918401918201527f746572223e3c7265637420783d22302220793d2230222077696474683d22353160778201527f3222206865696768743d22353132222066696c6c3d227768697465222f3e3c6760978201527f2066696c6c3d22626c61636b223e3c672069643d227368617065496e6e65722260b78201527f207374726f6b652d6c696e656a6f696e3d22726f756e64223e0000000000000060d782015284516138758160f0840160208901612d76565b7f3c2f673e3c2f673e3c2f6d61736b3e3c672069643d22636c6f636b436972636c60f092909101918201527f65734c61726765223e3c636972636c652063783d22323536222063793d2234386101108201527f2220723d223230222f3e3c636972636c652063783d223438222063793d2232356101308201527f362220723d223230222f3e3c636972636c652063783d22323536222063793d226101508201527f3436342220723d223230222f3e3c636972636c652063783d22343634222063796101708201527f3d223235362220723d223230222f3e3c2f673e3c672069643d22636c6f636b436101908201527f6972636c6573536d616c6c223e3c636972636c652063783d22323536222063796101b08201527f3d2234382220723d223132222f3e3c636972636c652063783d223438222063796101d08201527f3d223235362220723d223132222f3e3c636972636c652063783d2232353622206101f08201527f63793d223436342220723d223132222f3e3c636972636c652063783d223436346102108201527f222063793d223235362220723d223132222f3e3c2f673e3c2f646566733e0000610230820152613a3461024e820185613196565b9695505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b605b60f81b8152600060018a51613aad8183860160208f01612d76565b8a5190840190613ac38184840160208f01612d76565b8a51910190613ad88184840160208e01612d76565b8951910190613aed8184840160208d01612d76565b8851910190613b028184840160208c01612d76565b8751910190613b178184840160208b01612d76565b8651910190613b2c8184840160208a01612d76565b8551910190613b418184840160208901612d76565b01019a9950505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600081613b7657613b766130cc565b506000190190565b600060208284031215613b9057600080fd5b815167ffffffffffffffff811115613ba757600080fd5b8201601f81018413613bb857600080fd5b8051613bc6612f2e82612ef8565b818152856020838501011115613bdb57600080fd5b6128df826020830160208601612d76565b7f3c67207374726f6b652d77696474683d223022207374726f6b653d22626c616381527f6b22207374726f6b652d6f7061636974793d223122206d61736b3d2275726c2860208201527f236672616d654f757465722922203e3c7265637420783d22302220793d22302260408201527f2077696474683d2235313222206865696768743d22353132222066696c6c3d226060820152673bb434ba3291179f60c11b608082015260008451613ca7816088850160208901612d76565b7f3c67206d61736b3d2275726c282373686170654f7574657229223e00000000006088918401918201528451613ce48160a3840160208901612d76565b808201915050631e17b39f60e11b8060a38301528451613d0b8160a7850160208901612d76565b60a792019182015260ab0195945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613a3490830184612d9a565b600060208284031215613d6457600080fd5b815161204981612d43565b7f7b22646973706c61795f74797065223a20226e756d626572222c2022747261698152693a2fba3cb832911d101160b11b602082015260008451613dba81602a850160208901612d76565b6b0111610113b30b63ab2911d160a51b602a918401918201528451613de6816036840160208901612d76565b607d60f81b603692909101918201528351613e08816037840160208801612d76565b0160370195945050505050565b6f3d913a3930b4ba2fba3cb832911d101160811b81528351600090613e41816010850160208901612d76565b6c111610113b30b63ab2911d101160991b6010918401918201528451613e6e81601d840160208901612d76565b61227d60f01b601d92909101918201528351613e9181601f840160208801612d76565b01601f0195945050505050565b600087516020613eb18285838d01612d76565b885191840191613ec48184848d01612d76565b8851920191613ed68184848c01612d76565b8751920191613ee88184848b01612d76565b8651920191613efa8184848a01612d76565b8551920191613f0c8184848901612d76565b919091019998505050505050505050565b60ff8181168382160290811690818114613f3957613f396130cc565b5092915050565b701e339039ba3937b5b296bbb4b23a341e9160791b81528251600090613f6d816011850160208801612d76565b7f222066696c6c3d227472616e73706172656e74223e3c75736520687265663d226011918401918201527f237368617065496e6e657222207374726f6b653d22776869746522207472616e60318201527f73666f726d3d227363616c6528312e3030352922207472616e73666f726d2d6f60518201527f726967696e3d2232353620323536222f3e3c75736520687265663d222373686160718201527f7065496e6e657222207374726f6b653d22626c61636b222f3e3c2f673e3c672060918201526d39ba3937b5b296bbb4b23a341e9160911b60b182015283516140598160bf840160208801612d76565b7f222066696c6c3d227472616e73706172656e7422207374726f6b652d6f70616360bf92909101918201527f6974793d2231223e3c75736520687265663d22236672616d65496e6e6572222060df8201527f7374726f6b653d22776869746522207472616e73666f726d3d227363616c652860ff8201527f302e3939392922207472616e73666f726d2d6f726967696e3d2232353620323561011f8201527f36222f3e3c75736520687265663d22236672616d65496e6e657222207374726f61013f8201526f35b29e91313630b1b591179f1e17b39f60811b61015f82015261016f01949350505050565b60006020828403121561415657600080fd5b5051919050565b60ff8181168382160190811115610647576106476130cc565b61ffff818116838216028082169190828114614194576141946130cc565b505092915050565b7f3c67207472616e73666f726d2d6f726967696e3d22323536203235362220747281526e0c2dce6ccdee4da7a44e6c6c2d8ca5608b1b6020820152600085516141ec81602f850160208a01612d76565b6a058625240e4dee8c2e8ca560ab1b602f91840191820152855161421781603a840160208a01612d76565b6214911f60e91b603a9290910191820152845161423b81603d840160208901612d76565b845191019061425181603d840160208801612d76565b631e17b39f60e11b603d92909101918201526041019695505050505050565b600181815b808511156142ab578160001904821115614291576142916130cc565b8085161561429e57918102915b93841c9390800290614275565b509250929050565b6000826142c257506001610647565b816142cf57506000610647565b81600181146142e557600281146142ef5761430b565b6001915050610647565b60ff841115614300576143006130cc565b50506001821b610647565b5060208310610133831016604e8410600b841016171561432e575081810a610647565b6143388383614270565b806000190482111561434c5761434c6130cc565b029392505050565b600061204960ff8416836142b3565b60008261437257614372613146565b500690565b7f3c7265637420783d222d313238222077696474683d223736382220793d222d3681526a1a11103432b4b3b43a1e9160a91b6020820152600085516143c381602b850160208a01612d76565b7f22207374726f6b653d22626c61636b22207374726f6b652d77696474683d2200602b91840191820152855161440081604a840160208a01612d76565b6711103334b6361e9160c11b604a92909101918201528451614429816052840160208901612d76565b6f11103334b63616b7b830b1b4ba3c9e9160811b60529290910191820152835161445a816062840160208801612d76565b6211179f60e91b606292909101918201526065019695505050505050565b7f3c616e696d6174655472616e73666f726d206475723d220000000000000000008152600083516144b0816017850160208801612d76565b6a3991103b30b63ab2b99e9160a91b60179184019182015283516144db816022840160208801612d76565b7f2220747970653d227472616e736c61746522206174747269627574654e616d65602292909101918201527f3d227472616e73666f726d2220617474726962757465547970653d22584d4c2260428201527f20726570656174436f756e743d22696e646566696e69746522206164646974696062820152693b329e9139bab691179f60b11b6082820152608c0194935050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212200acac01020ce6075e0c2551614662778fd68713c30c4e0d0054a8074c776c12064736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_salePrice": "- the sale price of the NFT asset specified by _tokenId",
          "_tokenId": "- the NFT asset queried for royalty information"
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment",
          "royaltyAmount": "- the royalty payment amount for _salePrice"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "withdraw()": {
        "notice": "Beneficiary handling - allow all ETH to be withdrawn from contract to beneficiary, and the owner to update or lock the beneficiary"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 148,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 152,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 158,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3101,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "externalUrl",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 3107,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3111,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "generator1",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3115,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "generator2",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3117,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "beneficiary",
        "offset": 0,
        "slot": "11",
        "type": "t_address_payable"
      },
      {
        "astId": 3120,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "beneficiaryLocked",
        "offset": 20,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 3123,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "royaltyBasisPoints",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3126,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "mf",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(MondrianFrames)2911"
      },
      {
        "astId": 3129,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "ms",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(MondrianShapes)3061"
      },
      {
        "astId": 3984,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "baseAngles",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_uint16)8_storage"
      },
      {
        "astId": 3997,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "baseAngleRarityMillibit",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_uint256)8_storage"
      },
      {
        "astId": 4054,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "colourPaletteNames",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_string_storage)8_storage"
      },
      {
        "astId": 4067,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "colourPaletteRarityMillibit",
        "offset": 0,
        "slot": "32",
        "type": "t_array(t_uint256)8_storage"
      },
      {
        "astId": 4210,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "colourPalettes",
        "offset": 0,
        "slot": "40",
        "type": "t_array(t_array(t_string_storage)16_storage)8_storage"
      },
      {
        "astId": 4294,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "opacityPaletteNames",
        "offset": 0,
        "slot": "168",
        "type": "t_array(t_string_storage)16_storage"
      },
      {
        "astId": 4381,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "opacityPalettes",
        "offset": 0,
        "slot": "184",
        "type": "t_array(t_array(t_string_storage)4_storage)16_storage"
      },
      {
        "astId": 4439,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "strokeWidthMultiplierNames",
        "offset": 0,
        "slot": "248",
        "type": "t_array(t_string_storage)4_storage"
      },
      {
        "astId": 4448,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "strokeWidthMultipliers",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint8)4_storage"
      },
      {
        "astId": 4457,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "strokeWidthMultiplierRarityMillibit",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)4_storage"
      },
      {
        "astId": 4514,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "durationMultipliers",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_uint16)8_storage"
      },
      {
        "astId": 4527,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "durationMultiplierRarityMillibit",
        "offset": 0,
        "slot": "258",
        "type": "t_array(t_uint256)8_storage"
      },
      {
        "astId": 4580,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "strokeWidths",
        "offset": 0,
        "slot": "266",
        "type": "t_array(t_uint8)4_storage"
      },
      {
        "astId": 4589,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "rectHeights",
        "offset": 0,
        "slot": "267",
        "type": "t_array(t_uint16)4_storage"
      },
      {
        "astId": 4602,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "durationSecondsList",
        "offset": 0,
        "slot": "268",
        "type": "t_array(t_uint16)8_storage"
      },
      {
        "astId": 4615,
        "contract": "contracts/MovingMondrian.sol:MovingMondrian",
        "label": "yMovementValues",
        "offset": 0,
        "slot": "269",
        "type": "t_array(t_string_storage)8_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_array(t_string_storage)16_storage)8_storage": {
        "base": "t_array(t_string_storage)16_storage",
        "encoding": "inplace",
        "label": "string[16][8]",
        "numberOfBytes": "4096"
      },
      "t_array(t_array(t_string_storage)4_storage)16_storage": {
        "base": "t_array(t_string_storage)4_storage",
        "encoding": "inplace",
        "label": "string[4][16]",
        "numberOfBytes": "2048"
      },
      "t_array(t_string_storage)16_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[16]",
        "numberOfBytes": "512"
      },
      "t_array(t_string_storage)4_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_string_storage)8_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[8]",
        "numberOfBytes": "256"
      },
      "t_array(t_uint16)4_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[4]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)8_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[8]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)8_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[8]",
        "numberOfBytes": "256"
      },
      "t_array(t_uint8)4_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[4]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MondrianFrames)2911": {
        "encoding": "inplace",
        "label": "contract MondrianFrames",
        "numberOfBytes": "20"
      },
      "t_contract(MondrianShapes)3061": {
        "encoding": "inplace",
        "label": "contract MondrianShapes",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}